{
  "address": "0xa4e1D21AfB844d3dAD1db4FDcC2cE22268E5633f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pubkeyHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "violationIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FinePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardBalance",
          "type": "uint256"
        }
      ],
      "name": "RewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        }
      ],
      "name": "UserCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "violationType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "reportedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fineAmount",
          "type": "uint256"
        }
      ],
      "name": "ViolationReported",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anonAadhaarVerifierAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convertPointsToRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_vehicleType",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nullifierSeed1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifier1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "revealArray",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "groth16Proof1",
              "type": "uint256[8]"
            }
          ],
          "internalType": "struct Backend.CreateUserParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createUser",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "finesPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsersAndPoints",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "basenames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "points",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsersAndViolations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "basename",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "time",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "violationType",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "area",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "reportedBy",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isPaid",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "fineAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Backend.Violation[]",
              "name": "violations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Backend.UserViolationInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "getUserDetailsByAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_basename",
          "type": "string"
        }
      ],
      "name": "getUserDetailsByBasename",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserViolations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "violationType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "reportedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fineAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Backend.Violation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_violationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "revealArray",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[8]",
          "name": "groth16Proof",
          "type": "uint256[8]"
        }
      ],
      "name": "payFine",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_violationType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_area",
          "type": "string"
        }
      ],
      "name": "reportViolation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storedPublicKeyHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDailyPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_points",
          "type": "uint256"
        }
      ],
      "name": "updatePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newReward",
          "type": "uint256"
        }
      ],
      "name": "updateUserReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "vehicleToUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "violationFines",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x488b01399b6a9b2704f347cbe22cdfbfa7c3e1fc74a514e0467fc476b1b1919b",
  "receipt": {
    "to": null,
    "from": "0x5a4983927dCEe4aF40E5829Eb890698e63C9e3ce",
    "contractAddress": "0xa4e1D21AfB844d3dAD1db4FDcC2cE22268E5633f",
    "transactionIndex": 9,
    "gasUsed": "2695312",
    "logsBloom": "0x
    "blockHash": "0x71cfd992afb5a7c6c077d88bf8ea93902bab7c993ce2139927cfcccb30c98cd5",
    "transactionHash": "0x488b01399b6a9b2704f347cbe22cdfbfa7c3e1fc74a514e0467fc476b1b1919b",
    "logs": [],
    "blockNumber": 18921744,
    "cumulativeGasUsed": "3121789",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4C4d6c21F1D8e4591a69f7662b6EcE0f2f0E61b",
    "0x6E1c757A9E94f5D78c053A0d5Dd6854619095B88",
    "7159552241047614681013946344274430157054820687880791674287250194862110506098"
  ],
  "numDeployments": 13,
  "solcInputHash": "916b00ae94f89a3a6cce4394c0769de7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pubkeyHash\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"violationIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FinePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardBalance\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"name\":\"ViolationReported\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anonAadhaarVerifierAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertPointsToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vehicleRegistrationNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vehicleType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nullifierSeed1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof1\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct Backend.CreateUserParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"finesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersAndPoints\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"basenames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"points\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersAndViolations\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Backend.Violation[]\",\"name\":\"violations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Backend.UserViolationInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getUserDetailsByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_basename\",\"type\":\"string\"}],\"name\":\"getUserDetailsByBasename\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserViolations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Backend.Violation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_violationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof\",\"type\":\"uint256[8]\"}],\"name\":\"payFine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_violationType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_area\",\"type\":\"string\"}],\"name\":\"reportViolation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedPublicKeyHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDailyPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"updatePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"updateUserReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"vehicleToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"violationFines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Backend.sol\":\"Backend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaar {\\n    function verifyAnonAadhaarProof(\\n        uint nullifierSeed,\\n        uint nullifier,\\n        uint timestamp,\\n        uint signal,\\n        uint[4] memory revealArray,\\n        uint[8] memory groth16Proof\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3d0247e04707d2266471efeef4ab38ecf879cc286217ad5f624d966608e8964d\",\"license\":\"GPL-3.0\"},\"@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaarVote {\\n\\n    struct Proposal {\\n        string description;\\n        uint256 voteCount;\\n    }\\n\\n    event Voted(address indexed _from, uint256 indexed _propositionIndex);\\n}\",\"keccak256\":\"0xd67f99d608c3765f289f7561231f806ab439964dca134728973be60dee700eb0\",\"license\":\"GPL-3.0\"},\"contracts/Backend.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol\\\";\\r\\nimport \\\"@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol\\\";\\r\\nimport \\\"../interfaces/IAnonDigiLockerGroth16Verifier.sol\\\";\\r\\nimport \\\"../interfaces/IAnonDigiLocker.sol\\\";\\r\\n\\r\\ncontract Backend {\\r\\n    address public anonAadhaarVerifierAddr;\\r\\n    address public verifier;\\r\\n    uint256 public immutable storedPublicKeyHash;\\r\\n    address[] public allUsers; // Array to track all user addresses\\r\\n    struct User {\\r\\n        string basename;\\r\\n        string vehicleRegistrationNumber;\\r\\n        string vehicleType;\\r\\n        address walletAddress; // keep only this one\\r\\n        uint256 pendingFines;\\r\\n        uint256 rewardBalance;\\r\\n        uint256 points; // Added points field\\r\\n    }\\r\\n\\r\\n    struct Violation {\\r\\n        uint256 time;\\r\\n        string violationType;\\r\\n        string area; // Add area field\\r\\n        address reportedBy;\\r\\n        bool isPaid;\\r\\n        uint256 fineAmount;\\r\\n    }\\r\\n\\r\\n    struct CreateUserParams {\\r\\n        uint256 nullifierSeed1;\\r\\n        uint256 nullifier1;\\r\\n        uint256 timestamp;\\r\\n        uint256[4] revealArray;\\r\\n        uint256[8] groth16Proof1;\\r\\n        // uint256 nullifier2;\\r\\n        // uint256 nullifierSeed2;\\r\\n        // uint256 documentType;\\r\\n        // uint256 reveal;\\r\\n        // uint256 signal;\\r\\n        // uint256[8] groth16Proof2;\\r\\n    }\\r\\n\\r\\n    uint256 public totalRewardPool;\\r\\n    uint256 public totalpoints;\\r\\n    mapping(address => User) public users;\\r\\n    mapping(string => address) public vehicleToUser;\\r\\n    mapping(address => Violation[]) userViolations;\\r\\n    mapping(address => uint256) public finesPaid;\\r\\n    mapping(string => uint256) public violationFines;\\r\\n\\r\\n    event UserCreated(address indexed userAddress, string name, string vehicleRegistrationNumber);\\r\\n    event RewardUpdated(address indexed user, uint256 newRewardBalance);\\r\\n    event ViolationReported(address indexed user, string violationType, address reportedBy, uint256 fineAmount);\\r\\n    event FinePaid(address indexed user, uint256 violationIndex, uint256 amount);\\r\\n\\r\\n    constructor(address _verifierAddr, address _verifier, uint256 _pubkeyHash) {\\r\\n        verifier = _verifier;\\r\\n        // Initialize some dummy fine amounts for violation types\\r\\n        anonAadhaarVerifierAddr = _verifierAddr;\\r\\n        storedPublicKeyHash = _pubkeyHash;\\r\\n        violationFines[\\\"Speeding\\\"] = 80;\\r\\n        violationFines[\\\"Parking\\\"] = 40;\\r\\n        violationFines[\\\"Red Light\\\"] = 60;\\r\\n        violationFines[\\\"Wrong way\\\"] = 90;\\r\\n        totalRewardPool = 1000; // Initialize with 1000\\r\\n        totalpoints = 0;\\r\\n    }\\r\\n\\r\\n    // ---------------------- REWARDS SYSTEM FUNCTIONS ----------------------\\r\\n\\r\\n    // Function to add to the total reward pool\\r\\n    function updateUserReward(address _user, uint256 _newReward) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n\\r\\n        users[_user].rewardBalance = _newReward;\\r\\n        emit RewardUpdated(_user, _newReward);\\r\\n    }\\r\\n\\r\\n    // Function to fetch a user's reward balance\\r\\n    function getMyRewards() public view returns (uint256) {\\r\\n        User storage user = users[msg.sender];\\r\\n        return user.rewardBalance;\\r\\n    }\\r\\n\\r\\n    function addressToUint256(address _addr) private pure returns (uint256) {\\r\\n        return uint256(uint160(_addr));\\r\\n    }\\r\\n\\r\\n    function _hash(uint256 message) private pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(message))) >> 3;\\r\\n    }\\r\\n\\r\\n    function verifyAnonAadhaar(\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 nullifier,\\r\\n        uint256 timestamp,\\r\\n        uint256[4] memory revealArray,\\r\\n        uint256[8] memory groth16Proof\\r\\n    ) internal returns (bool) {\\r\\n        return\\r\\n            IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\r\\n                nullifierSeed,\\r\\n                nullifier,\\r\\n                timestamp,\\r\\n                addressToUint256(msg.sender),\\r\\n                revealArray,\\r\\n                groth16Proof\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function verifyDigiLocker(\\r\\n        uint256[8] memory proof,\\r\\n        uint256 nullifier,\\r\\n        uint256 documentType,\\r\\n        uint256 reveal,\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 signal\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 signalHash = _hash(signal);\\r\\n        return\\r\\n            IAnonDigiLockerGroth16Verifier(verifier).verifyProof(\\r\\n                [proof[0], proof[1]],\\r\\n                [[proof[2], proof[3]], [proof[4], proof[5]]],\\r\\n                [proof[6], proof[7]],\\r\\n                [storedPublicKeyHash, nullifier, documentType, reveal, nullifierSeed, signalHash]\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // Create a new user\\r\\n    function createUser(\\r\\n        string memory _basename,\\r\\n        string memory _vehicleRegistrationNumber,\\r\\n        string memory _vehicleType,\\r\\n        CreateUserParams memory params // removed _userAddress parameter\\r\\n    ) public payable {\\r\\n        require(users[msg.sender].walletAddress == address(0), \\\"User already exists\\\");\\r\\n\\r\\n        bool isValid = verifyAnonAadhaar(\\r\\n            params.nullifierSeed1,\\r\\n            params.nullifier1,\\r\\n            params.timestamp,\\r\\n            params.revealArray,\\r\\n            params.groth16Proof1\\r\\n        );\\r\\n        require(isValid, \\\"[AnonAadhaarVote]: proof sent is not valid.\\\");\\r\\n\\r\\n        // bool isValid2 = verifyDigiLocker(\\r\\n        //     params.groth16Proof2,\\r\\n        //     params.nullifier2,\\r\\n        //     params.documentType,\\r\\n        //     params.reveal,\\r\\n        //     params.nullifierSeed2,\\r\\n        //     params.signal\\r\\n        // );\\r\\n        // require(isValid || isValid2, 'Proof sent is not valid.');\\r\\n        // require(isValid2, '[AnonAadhaarVote]: DL Proof sent is not valid.');\\r\\n\\r\\n        users[msg.sender] = User({\\r\\n            basename: _basename,\\r\\n            vehicleRegistrationNumber: _vehicleRegistrationNumber,\\r\\n            vehicleType: _vehicleType,\\r\\n            walletAddress: msg.sender,\\r\\n            pendingFines: 0,\\r\\n            rewardBalance: 0,\\r\\n            points: 100 // Start with 100 points\\r\\n        });\\r\\n        allUsers.push(msg.sender); // Add this line after creating new user\\r\\n        vehicleToUser[_vehicleRegistrationNumber] = msg.sender;\\r\\n        totalpoints += 100;\\r\\n        emit UserCreated(msg.sender, _basename, _vehicleRegistrationNumber);\\r\\n    }\\r\\n\\r\\n    // Report a violation\\r\\n    function reportViolation(\\r\\n        address _user,\\r\\n        string memory _violationType,\\r\\n        uint256 _timestamp,\\r\\n        string memory _area\\r\\n    ) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        require(violationFines[_violationType] > 0, \\\"Invalid violation type\\\");\\r\\n        require(_timestamp <= block.timestamp, \\\"Invalid timestamp\\\");\\r\\n\\r\\n        uint256 fineAmount = violationFines[_violationType];\\r\\n        userViolations[_user].push(\\r\\n            Violation({\\r\\n                time: _timestamp,\\r\\n                violationType: _violationType,\\r\\n                area: _area,\\r\\n                reportedBy: msg.sender,\\r\\n                isPaid: false,\\r\\n                fineAmount: fineAmount\\r\\n            })\\r\\n        );\\r\\n        users[_user].pendingFines++;\\r\\n        emit ViolationReported(_user, _violationType, msg.sender, fineAmount);\\r\\n    }\\r\\n\\r\\n    // Fetch all violations of a user\\r\\n    function getUserViolations(address _user) public view returns (Violation[] memory) {\\r\\n        return userViolations[_user];\\r\\n    }\\r\\n\\r\\n    // Pay a fine\\r\\n    function payFine(\\r\\n        address _user,\\r\\n        uint256 _violationIndex,\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 nullifier,\\r\\n        uint256 timestamp,\\r\\n        uint256[4] memory revealArray,\\r\\n        uint256[8] memory groth16Proof\\r\\n    ) public payable {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        require(!userViolations[_user][_violationIndex].isPaid, \\\"Fine already paid\\\");\\r\\n        bool isValid = IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\r\\n            nullifierSeed,\\r\\n            nullifier,\\r\\n            timestamp,\\r\\n            addressToUint256(msg.sender),\\r\\n            revealArray,\\r\\n            groth16Proof\\r\\n        );\\r\\n        require(isValid, \\\"[AnonAadhaarVote]: proof sent is not valid.\\\");\\r\\n\\r\\n        Violation storage violation = userViolations[_user][_violationIndex];\\r\\n        require(msg.value == violation.fineAmount, \\\"Payment must be equal to the fine amount\\\");\\r\\n\\r\\n        violation.isPaid = true;\\r\\n        users[_user].pendingFines--;\\r\\n        finesPaid[_user] += msg.value;\\r\\n        totalRewardPool += msg.value; // Add fine amount to total reward pool\\r\\n        emit FinePaid(_user, _violationIndex, msg.value);\\r\\n    }\\r\\n\\r\\n    function updatePoints(address _user, uint256 _points) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        totalpoints-=users[_user].points;\\r\\n        users[_user].points = _points;\\r\\n        totalpoints+=users[_user].points;\\r\\n    }\\r\\n\\r\\n    function convertPointsToRewards() public {\\r\\n        User storage user = users[msg.sender];\\r\\n        require(user.points > 0, \\\"No points to convert\\\");\\r\\n        require(totalRewardPool > 0, \\\"Reward pool is empty\\\");\\r\\n        require(totalpoints > 0, \\\"No points in the system\\\");\\r\\n\\r\\n        // Calculate user's share of the reward pool\\r\\n        uint256 rewardShare = (user.points * totalRewardPool) / totalpoints;\\r\\n\\r\\n        // Ensure contract has enough Ether\\r\\n        require(address(this).balance >= rewardShare, \\\"Not enough funds in contract to pay rewards\\\");\\r\\n\\r\\n        // Transfer reward to the user's wallet\\r\\n        (bool success, ) = msg.sender.call{ value: rewardShare }(\\\"\\\");\\r\\n        require(success, \\\"Reward transfer failed\\\");\\r\\n\\r\\n        // Update user's internal balances\\r\\n        user.rewardBalance += rewardShare; // For internal tracking\\r\\n        totalpoints-=user.points;\\r\\n        user.points = 0; // Reset points after conversion\\r\\n        totalRewardPool -= rewardShare;\\r\\n\\r\\n        emit RewardUpdated(msg.sender, user.rewardBalance);\\r\\n    }\\r\\n\\r\\n    function getContractBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getUserDetailsByAddress(\\r\\n        address _walletAddress\\r\\n    ) public view returns (\\r\\n        string memory basename,\\r\\n        string memory vehicleNumber,\\r\\n        string memory vehicleType,\\r\\n        uint256 pendingFines,\\r\\n        uint256 rewardBalance,\\r\\n        uint256 points\\r\\n    ) {\\r\\n        require(users[_walletAddress].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        User memory user = users[_walletAddress];\\r\\n        return (\\r\\n            user.basename,\\r\\n            user.vehicleRegistrationNumber,\\r\\n            user.vehicleType,\\r\\n            user.pendingFines,\\r\\n            user.rewardBalance,\\r\\n            user.points\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getUserDetailsByBasename(\\r\\n        string memory _basename\\r\\n    ) public view returns (\\r\\n        string memory basename,\\r\\n        string memory vehicleNumber,\\r\\n        string memory vehicleType,\\r\\n        address walletAddress,\\r\\n        uint256 pendingFines,\\r\\n        uint256 rewardBalance,\\r\\n        uint256 points\\r\\n    ) {\\r\\n        address userAddress;\\r\\n        for (uint i = 0; i < allUsers.length; i++) {\\r\\n            if (keccak256(bytes(users[allUsers[i]].basename)) == keccak256(bytes(_basename))) {\\r\\n                userAddress = allUsers[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(userAddress != address(0), \\\"User not found\\\");\\r\\n        \\r\\n        User memory user = users[userAddress];\\r\\n        return (\\r\\n            user.basename,\\r\\n            user.vehicleRegistrationNumber,\\r\\n            user.vehicleType,\\r\\n            user.walletAddress,\\r\\n            user.pendingFines,\\r\\n            user.rewardBalance,\\r\\n            user.points\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAllUsersAndPoints()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string[] memory basenames, // changed from usernames to basenames\\r\\n            uint256[] memory points\\r\\n        )\\r\\n    {\\r\\n        uint256 totalUsers = allUsers.length;\\r\\n        basenames = new string[](totalUsers); // changed variable name\\r\\n        points = new uint256[](totalUsers);\\r\\n\\r\\n        for (uint256 i = 0; i < totalUsers; i++) {\\r\\n            address userAddress = allUsers[i];\\r\\n            basenames[i] = users[userAddress].basename; // changed variable name\\r\\n            points[i] = users[userAddress].points;\\r\\n        }\\r\\n\\r\\n        return (basenames, points); // changed return variable name\\r\\n    }\\r\\n\\r\\n    function getUserPoints(address _userAddress) public view returns (uint256) {\\r\\n        require(users[_userAddress].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        return users[_userAddress].points;\\r\\n    }\\r\\n\\r\\n    struct UserViolationInfo {\\r\\n        address userAddress;\\r\\n        string basename;\\r\\n        Violation[] violations;\\r\\n    }\\r\\n\\r\\n    function getAllUsersAndViolations() public view returns (UserViolationInfo[] memory) {\\r\\n        uint256 totalUsers = allUsers.length;\\r\\n        UserViolationInfo[] memory allUserInfo = new UserViolationInfo[](totalUsers);\\r\\n\\r\\n        for (uint256 i = 0; i < totalUsers; i++) {\\r\\n            address userAddr = allUsers[i];\\r\\n            allUserInfo[i] = UserViolationInfo({\\r\\n                userAddress: userAddr,\\r\\n                basename: users[userAddr].basename,\\r\\n                violations: userViolations[userAddr]\\r\\n            });\\r\\n        }\\r\\n\\r\\n        return allUserInfo;\\r\\n    }\\r\\n\\r\\n    // Add this new function for daily points update\\r\\n    function updateDailyPoints() public {\\r\\n        uint256 totalUsers = allUsers.length;\\r\\n        for (uint256 i = 0; i < totalUsers; i++) {\\r\\n            address userAddr = allUsers[i];\\r\\n            if (users[userAddr].pendingFines == 0) {\\r\\n                users[userAddr].points += 10;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5b080ce8200f2f87debe415143f59a29350eeed865ee873e25469196654b441d\"},\"interfaces/IAnonDigiLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IAnonDigiLocker {\\r\\n    function verifyAnonDigiLockerProof(\\r\\n        uint nullifierSeed,\\r\\n        uint nullifier,\\r\\n        uint documentType,\\r\\n        uint reveal,\\r\\n        uint signal,\\r\\n        uint[8] memory groth16Proof\\r\\n    ) external view returns (bool);\\r\\n}\",\"keccak256\":\"0xa439945492521c630df6b85ddb854ae605cf7ce575a3096c5ed36a68b3a63c20\",\"license\":\"GPL-3.0\"},\"interfaces/IAnonDigiLockerGroth16Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IAnonDigiLockerGroth16Verifier {\\r\\n    function verifyProof(\\r\\n        uint[2] calldata _pA,\\r\\n        uint[2][2] calldata _pB,\\r\\n        uint[2] calldata _pC,\\r\\n        uint[6] calldata publicInputs\\r\\n    ) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x12e25353cfe33f9908962e504034c2fd788580fd61efb7aa680c40e58468992f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 45,
        "contract": "contracts/Backend.sol:Backend",
        "label": "anonAadhaarVerifierAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 47,
        "contract": "contracts/Backend.sol:Backend",
        "label": "verifier",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 52,
        "contract": "contracts/Backend.sol:Backend",
        "label": "allUsers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 97,
        "contract": "contracts/Backend.sol:Backend",
        "label": "totalRewardPool",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 99,
        "contract": "contracts/Backend.sol:Backend",
        "label": "totalpoints",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 104,
        "contract": "contracts/Backend.sol:Backend",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(User)67_storage)"
      },
      {
        "astId": 108,
        "contract": "contracts/Backend.sol:Backend",
        "label": "vehicleToUser",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 114,
        "contract": "contracts/Backend.sol:Backend",
        "label": "userViolations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Violation)80_storage)dyn_storage)"
      },
      {
        "astId": 118,
        "contract": "contracts/Backend.sol:Backend",
        "label": "finesPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 122,
        "contract": "contracts/Backend.sol:Backend",
        "label": "violationFines",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Violation)80_storage)dyn_storage": {
        "base": "t_struct(Violation)80_storage",
        "encoding": "dynamic_array",
        "label": "struct Backend.Violation[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Violation)80_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.Violation[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Violation)80_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(User)67_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)67_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(User)67_storage": {
        "encoding": "inplace",
        "label": "struct Backend.User",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/Backend.sol:Backend",
            "label": "basename",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 56,
            "contract": "contracts/Backend.sol:Backend",
            "label": "vehicleRegistrationNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 58,
            "contract": "contracts/Backend.sol:Backend",
            "label": "vehicleType",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 60,
            "contract": "contracts/Backend.sol:Backend",
            "label": "walletAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 62,
            "contract": "contracts/Backend.sol:Backend",
            "label": "pendingFines",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 64,
            "contract": "contracts/Backend.sol:Backend",
            "label": "rewardBalance",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 66,
            "contract": "contracts/Backend.sol:Backend",
            "label": "points",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Violation)80_storage": {
        "encoding": "inplace",
        "label": "struct Backend.Violation",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/Backend.sol:Backend",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 71,
            "contract": "contracts/Backend.sol:Backend",
            "label": "violationType",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 73,
            "contract": "contracts/Backend.sol:Backend",
            "label": "area",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 75,
            "contract": "contracts/Backend.sol:Backend",
            "label": "reportedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 77,
            "contract": "contracts/Backend.sol:Backend",
            "label": "isPaid",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 79,
            "contract": "contracts/Backend.sol:Backend",
            "label": "fineAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}