{
  "address": "0xB76401dDfc10275515cD7a6e8FAF47C14BeAE834",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pubkeyHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "violationIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FinePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        }
      ],
      "name": "UserCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "violationType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "reportedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fineAmount",
          "type": "uint256"
        }
      ],
      "name": "ViolationReported",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "anonAadhaarVerifierAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nullifierSeed1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifier1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "revealArray",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "groth16Proof1",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "nullifier2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifierSeed2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "documentType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reveal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "signal",
              "type": "uint256"
            },
            {
              "internalType": "uint256[8]",
              "name": "groth16Proof2",
              "type": "uint256[8]"
            }
          ],
          "internalType": "struct Backend.CreateUserParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createUser",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "finesPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserViolations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "violationType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "reportedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fineAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Backend.Violation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_violationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "revealArray",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[8]",
          "name": "groth16Proof",
          "type": "uint256[8]"
        }
      ],
      "name": "payFine",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_violationType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_area",
          "type": "string"
        }
      ],
      "name": "reportViolation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storedPublicKeyHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "vehicleToUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "violationFines",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d3e0e61410e30d76d42d3e9ce59a0d9705cfa19e9cb7da58a3b05f1c5036169",
  "receipt": {
    "to": null,
    "from": "0x5a4983927dCEe4aF40E5829Eb890698e63C9e3ce",
    "contractAddress": "0xB76401dDfc10275515cD7a6e8FAF47C14BeAE834",
    "transactionIndex": 3,
    "gasUsed": "1567660",
    "logsBloom": "0x
    "blockHash": "0xd452cbfb6050c9222ee92c9dd8680dd1fb978b383e075791983f0ed95b5b9937",
    "transactionHash": "0x6d3e0e61410e30d76d42d3e9ce59a0d9705cfa19e9cb7da58a3b05f1c5036169",
    "logs": [],
    "blockNumber": 18910105,
    "cumulativeGasUsed": "1791008",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4C4d6c21F1D8e4591a69f7662b6EcE0f2f0E61b",
    "0x6E1c757A9E94f5D78c053A0d5Dd6854619095B88",
    "7159552241047614681013946344274430157054820687880791674287250194862110506098"
  ],
  "numDeployments": 2,
  "solcInputHash": "1d4190908c841a5f1304cbbad455f50d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pubkeyHash\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"violationIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FinePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"name\":\"ViolationReported\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"anonAadhaarVerifierAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vehicleRegistrationNumber\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nullifierSeed1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof1\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"nullifier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierSeed2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reveal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signal\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof2\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct Backend.CreateUserParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"finesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserViolations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Backend.Violation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_violationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof\",\"type\":\"uint256[8]\"}],\"name\":\"payFine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_violationType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_area\",\"type\":\"string\"}],\"name\":\"reportViolation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedPublicKeyHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"vehicleToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"violationFines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Backend.sol\":\"Backend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaar {\\n    function verifyAnonAadhaarProof(\\n        uint nullifierSeed,\\n        uint nullifier,\\n        uint timestamp,\\n        uint signal,\\n        uint[4] memory revealArray,\\n        uint[8] memory groth16Proof\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3d0247e04707d2266471efeef4ab38ecf879cc286217ad5f624d966608e8964d\",\"license\":\"GPL-3.0\"},\"@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaarVote {\\n\\n    struct Proposal {\\n        string description;\\n        uint256 voteCount;\\n    }\\n\\n    event Voted(address indexed _from, uint256 indexed _propositionIndex);\\n}\",\"keccak256\":\"0xd67f99d608c3765f289f7561231f806ab439964dca134728973be60dee700eb0\",\"license\":\"GPL-3.0\"},\"contracts/Backend.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol';\\r\\nimport '@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol';\\r\\nimport \\\"../interfaces/IAnonDigiLockerGroth16Verifier.sol\\\";\\r\\nimport \\\"../interfaces/IAnonDigiLocker.sol\\\";\\r\\n\\r\\ncontract Backend {\\r\\n    address public anonAadhaarVerifierAddr;\\r\\n    address public verifier;\\r\\n    uint256 public immutable storedPublicKeyHash;\\r\\n    struct User {\\r\\n        string name;\\r\\n        string vehicleRegistrationNumber;\\r\\n        address walletAddress;\\r\\n        uint256 pendingFines;\\r\\n    }\\r\\n\\r\\n    struct Violation {\\r\\n        uint256 time;\\r\\n        string violationType;\\r\\n        string area;           // Add area field\\r\\n        address reportedBy;\\r\\n        bool isPaid;\\r\\n        uint256 fineAmount;\\r\\n    }\\r\\n\\r\\n    struct CreateUserParams {\\r\\n        uint256 nullifierSeed1;\\r\\n        uint256 nullifier1;\\r\\n        uint256 timestamp;\\r\\n        uint256[4] revealArray;\\r\\n        uint256[8] groth16Proof1;\\r\\n        uint256 nullifier2;\\r\\n        uint256 nullifierSeed2;\\r\\n        uint256 documentType;\\r\\n        uint256 reveal;\\r\\n        uint256 signal;\\r\\n        uint256[8] groth16Proof2;\\r\\n    }\\r\\n\\r\\n    mapping(address => User) public users;\\r\\n    mapping(string => address) public vehicleToUser;\\r\\n    mapping(address => Violation[]) userViolations;\\r\\n    mapping(address => uint256) public finesPaid;\\r\\n    mapping(string => uint256) public violationFines;\\r\\n\\r\\n    event UserCreated(address indexed userAddress, string name, string vehicleRegistrationNumber);\\r\\n    event ViolationReported(address indexed user, string violationType, address reportedBy, uint256 fineAmount);\\r\\n    event FinePaid(address indexed user, uint256 violationIndex, uint256 amount);\\r\\n\\r\\n    constructor(address _verifierAddr, address _verifier, uint256 _pubkeyHash) {\\r\\n        verifier=_verifier;\\r\\n        // Initialize some dummy fine amounts for violation types\\r\\n        anonAadhaarVerifierAddr = _verifierAddr;\\r\\n        storedPublicKeyHash = _pubkeyHash;\\r\\n        violationFines[\\\"Speeding\\\"] = 200;\\r\\n        violationFines[\\\"Parking\\\"] = 50;\\r\\n        violationFines[\\\"Red Light\\\"] = 50;\\r\\n        violationFines[\\\"Wrong way\\\"] = 50;\\r\\n    }\\r\\n\\r\\n    function addressToUint256(address _addr) private pure returns (uint256) {\\r\\n        return uint256(uint160(_addr));\\r\\n    }\\r\\n\\r\\n    function _hash(uint256 message) private pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(message))) >> 3;\\r\\n    }\\r\\n\\r\\n    function verifyAnonAadhaar(\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 nullifier,\\r\\n        uint256 timestamp,\\r\\n        uint256[4] memory revealArray,\\r\\n        uint256[8] memory groth16Proof\\r\\n    ) internal returns (bool) {\\r\\n        return IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\r\\n            nullifierSeed,\\r\\n            nullifier,\\r\\n            timestamp,\\r\\n            addressToUint256(msg.sender),\\r\\n            revealArray,\\r\\n            groth16Proof\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function verifyDigiLocker(\\r\\n        uint256[8] memory proof,\\r\\n        uint256 nullifier,\\r\\n        uint256 documentType,\\r\\n        uint256 reveal,\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 signal\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 signalHash = _hash(signal);\\r\\n        return IAnonDigiLockerGroth16Verifier(verifier).verifyProof(\\r\\n            [proof[0], proof[1]],\\r\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\r\\n            [proof[6], proof[7]],\\r\\n            [storedPublicKeyHash, nullifier, documentType, reveal, nullifierSeed, signalHash]\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    // Create a new user\\r\\n    function createUser(\\r\\n        string memory _name,\\r\\n        string memory _vehicleRegistrationNumber,\\r\\n        CreateUserParams memory params\\r\\n    ) public payable {\\r\\n        require(users[msg.sender].walletAddress == address(0), \\\"User already exists\\\");\\r\\n        \\r\\n        bool isValid = verifyAnonAadhaar(\\r\\n            params.nullifierSeed1,\\r\\n            params.nullifier1,\\r\\n            params.timestamp,\\r\\n            params.revealArray,\\r\\n            params.groth16Proof1\\r\\n        );\\r\\n        require(isValid, '[AnonAadhaarVote]: proof sent is not valid.');\\r\\n\\r\\n        bool isValid2 = verifyDigiLocker(\\r\\n            params.groth16Proof2,\\r\\n            params.nullifier2,\\r\\n            params.documentType,\\r\\n            params.reveal,\\r\\n            params.nullifierSeed2,\\r\\n            params.signal\\r\\n        );\\r\\n        require(isValid2, '[AnonAadhaarVote]: DL Proof sent is not valid.');\\r\\n\\r\\n        users[msg.sender] = User({\\r\\n            name: _name,\\r\\n            vehicleRegistrationNumber: _vehicleRegistrationNumber,\\r\\n            walletAddress: msg.sender,\\r\\n            pendingFines: 0\\r\\n        });\\r\\n        vehicleToUser[_vehicleRegistrationNumber] = msg.sender;\\r\\n        emit UserCreated(msg.sender, _name, _vehicleRegistrationNumber);\\r\\n    }\\r\\n\\r\\n    // Report a violation\\r\\n    function reportViolation(\\r\\n        address _user, \\r\\n        string memory _violationType,\\r\\n        uint256 _timestamp,\\r\\n        string memory _area\\r\\n    ) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        require(violationFines[_violationType] > 0, \\\"Invalid violation type\\\");\\r\\n        require(_timestamp <= block.timestamp, \\\"Invalid timestamp\\\");\\r\\n\\r\\n        uint256 fineAmount = violationFines[_violationType];\\r\\n        userViolations[_user].push(Violation({\\r\\n            time: _timestamp,\\r\\n            violationType: _violationType,\\r\\n            area: _area,\\r\\n            reportedBy: msg.sender,\\r\\n            isPaid: false,\\r\\n            fineAmount: fineAmount\\r\\n        }));\\r\\n        users[_user].pendingFines++;\\r\\n        emit ViolationReported(_user, _violationType, msg.sender, fineAmount);\\r\\n    }\\r\\n\\r\\n    // Fetch all violations of a user\\r\\n    function getUserViolations(address _user) public view returns (Violation[] memory) {\\r\\n        return userViolations[_user];\\r\\n    }\\r\\n\\r\\n    // Pay a fine\\r\\n    function payFine(address _user, uint256 _violationIndex, uint256 nullifierSeed,\\r\\n    uint256 nullifier,\\r\\n    uint256 timestamp,\\r\\n    uint256[4] memory revealArray,\\r\\n    uint256[8] memory groth16Proof) public payable {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        require(!userViolations[_user][_violationIndex].isPaid, \\\"Fine already paid\\\");\\r\\n        bool isValid = IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\r\\n            nullifierSeed,\\r\\n            nullifier,\\r\\n            timestamp,\\r\\n            addressToUint256(msg.sender),\\r\\n            revealArray,\\r\\n            groth16Proof\\r\\n        );\\r\\n        require(isValid, '[AnonAadhaarVote]: proof sent is not valid.');\\r\\n\\r\\n        Violation storage violation = userViolations[_user][_violationIndex];\\r\\n        require(msg.value == violation.fineAmount, \\\"Payment must be equal to the fine amount\\\");\\r\\n\\r\\n        violation.isPaid = true;\\r\\n        users[_user].pendingFines--;\\r\\n        finesPaid[_user] += msg.value;\\r\\n        emit FinePaid(_user, _violationIndex, msg.value);\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\n// pragma solidity ^0.8.19;\\r\\n\\r\\n// import '@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol';\\r\\n// import '@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol';\\r\\n\\r\\n// contract AnonAadhaarVote is IAnonAadhaarVote {\\r\\n//     string public votingQuestion;\\r\\n//     address public anonAadhaarVerifierAddr;\\r\\n\\r\\n//     // List of proposals\\r\\n//     Proposal[] public proposals;\\r\\n\\r\\n//     // Mapping to track if a userNullifier has already voted\\r\\n//     mapping(uint256 => bool) public hasVoted;\\r\\n\\r\\n//     // Constructor to initialize proposals\\r\\n//     constructor(\\r\\n\\r\\n//         address _verifierAddr\\r\\n//     ) {\\r\\n//         anonAadhaarVerifierAddr = _verifierAddr;\\r\\n//         votingQuestion = _votingQuestion;\\r\\n//         for (uint256 i = 0; i < proposalDescriptions.length; i++) {\\r\\n//             proposals.push(Proposal(proposalDescriptions[i], 0));\\r\\n//         }\\r\\n//     }\\r\\n\\r\\n//     /// @dev Convert an address to uint256, used to check against signal.\\r\\n//     /// @param _addr: msg.sender address.\\r\\n//     /// @return Address msg.sender's address in uint256\\r\\n//     function addressToUint256(address _addr) private pure returns (uint256) {\\r\\n//         return uint256(uint160(_addr));\\r\\n//     }\\r\\n\\r\\n//     /// @dev Check if the timestamp is more recent than (current time - 3 hours)\\r\\n//     /// @param timestamp: msg.sender address.\\r\\n//     /// @return bool\\r\\n//     function isLessThan3HoursAgo(uint timestamp) public view returns (bool) {\\r\\n//         return timestamp > (block.timestamp - 3 * 60 * 60);\\r\\n//     }\\r\\n\\r\\n//     /// @dev Register a vote in the contract.\\r\\n//     /// @param proposalIndex: Index of the proposal you want to vote for.\\r\\n//     /// @param nullifierSeed: Nullifier Seed used while generating the proof.\\r\\n//     /// @param nullifier: Nullifier for the user's Aadhaar data.\\r\\n//     /// @param timestamp: Timestamp of when the QR code was signed.\\r\\n//     /// @param revealArray: Array of the values used as input for the proof generation (equal to [0, 0, 0, 0] if no field reveal were asked).\\r\\n//     /// @param groth16Proof: SNARK Groth16 proof.\\r\\n//     function voteForProposal(\\r\\n//     uint256 proposalIndex,\\r\\n//     uint256 nullifierSeed,\\r\\n//     uint256 nullifier,\\r\\n//     uint256 timestamp,\\r\\n//     uint256[4] memory revealArray,\\r\\n//     uint256[8] memory groth16Proof\\r\\n// ) public payable {\\r\\n//     require(!hasVoted[nullifier], '[AnonAadhaarVote]: User has already voted');\\r\\n//     require(proposalIndex < proposals.length, '[AnonAadhaarVote]: Invalid proposal index');\\r\\n\\r\\n//     bool isValid = IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\r\\n//         nullifierSeed,\\r\\n//         nullifier,\\r\\n//         timestamp,\\r\\n//         addressToUint256(msg.sender),\\r\\n//         revealArray,\\r\\n//         groth16Proof\\r\\n//     );\\r\\n//     require(isValid, '[AnonAadhaarVote]: proof sent is not valid.');\\r\\n\\r\\n//     hasVoted[nullifier] = true;\\r\\n//     proposals[proposalIndex].voteCount++;\\r\\n\\r\\n//     emit Voted(msg.sender, proposalIndex);\\r\\n// }\\r\\n\\r\\n\\r\\n//     // Function to get the total number of proposals\\r\\n//     function getProposalCount() public view returns (uint256) {\\r\\n//         return proposals.length;\\r\\n//     }\\r\\n\\r\\n//     // Function to get proposal information by index\\r\\n//     function getProposal(\\r\\n//         uint256 proposalIndex\\r\\n//     ) public view returns (string memory, uint256) {\\r\\n//         require(\\r\\n//             proposalIndex < proposals.length,\\r\\n//             '[AnonAadhaarVote]: Invalid proposal index here'\\r\\n//         );\\r\\n\\r\\n//         Proposal memory proposal = proposals[proposalIndex];\\r\\n//         return (proposal.description, proposal.voteCount);\\r\\n//     }\\r\\n\\r\\n//     // Function to get the total number of votes across all proposals\\r\\n//     function getTotalVotes() public view returns (uint256) {\\r\\n//         uint256 totalVotes = 0;\\r\\n//         for (uint256 i = 0; i < proposals.length; i++) {\\r\\n//             totalVotes += proposals[i].voteCount;\\r\\n//         }\\r\\n//         return totalVotes;\\r\\n//     }\\r\\n\\r\\n//     // Function to check if a user has already voted\\r\\n//     function checkVoted(uint256 _nullifier) public view returns (bool) {\\r\\n//         return hasVoted[_nullifier];\\r\\n//     }\\r\\n// }\",\"keccak256\":\"0xec26a82c000c171f9ab1add197d71251604c217689de340c204ee482220354a5\",\"license\":\"GPL-3.0\"},\"interfaces/IAnonDigiLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IAnonDigiLocker {\\r\\n    function verifyAnonDigiLockerProof(\\r\\n        uint nullifierSeed,\\r\\n        uint nullifier,\\r\\n        uint documentType,\\r\\n        uint reveal,\\r\\n        uint signal,\\r\\n        uint[8] memory groth16Proof\\r\\n    ) external view returns (bool);\\r\\n}\",\"keccak256\":\"0xa439945492521c630df6b85ddb854ae605cf7ce575a3096c5ed36a68b3a63c20\",\"license\":\"GPL-3.0\"},\"interfaces/IAnonDigiLockerGroth16Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IAnonDigiLockerGroth16Verifier {\\r\\n    function verifyProof(\\r\\n        uint[2] calldata _pA,\\r\\n        uint[2][2] calldata _pB,\\r\\n        uint[2] calldata _pC,\\r\\n        uint[6] calldata publicInputs\\r\\n    ) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x12e25353cfe33f9908962e504034c2fd788580fd61efb7aa680c40e58468992f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 45,
        "contract": "contracts/Backend.sol:Backend",
        "label": "anonAadhaarVerifierAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 47,
        "contract": "contracts/Backend.sol:Backend",
        "label": "verifier",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 105,
        "contract": "contracts/Backend.sol:Backend",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(User)58_storage)"
      },
      {
        "astId": 109,
        "contract": "contracts/Backend.sol:Backend",
        "label": "vehicleToUser",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 115,
        "contract": "contracts/Backend.sol:Backend",
        "label": "userViolations",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(Violation)71_storage)dyn_storage)"
      },
      {
        "astId": 119,
        "contract": "contracts/Backend.sol:Backend",
        "label": "finesPaid",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 123,
        "contract": "contracts/Backend.sol:Backend",
        "label": "violationFines",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Violation)71_storage)dyn_storage": {
        "base": "t_struct(Violation)71_storage",
        "encoding": "dynamic_array",
        "label": "struct Backend.Violation[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Violation)71_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.Violation[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Violation)71_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(User)58_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)58_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(User)58_storage": {
        "encoding": "inplace",
        "label": "struct Backend.User",
        "members": [
          {
            "astId": 51,
            "contract": "contracts/Backend.sol:Backend",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 53,
            "contract": "contracts/Backend.sol:Backend",
            "label": "vehicleRegistrationNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 55,
            "contract": "contracts/Backend.sol:Backend",
            "label": "walletAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 57,
            "contract": "contracts/Backend.sol:Backend",
            "label": "pendingFines",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Violation)71_storage": {
        "encoding": "inplace",
        "label": "struct Backend.Violation",
        "members": [
          {
            "astId": 60,
            "contract": "contracts/Backend.sol:Backend",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 62,
            "contract": "contracts/Backend.sol:Backend",
            "label": "violationType",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 64,
            "contract": "contracts/Backend.sol:Backend",
            "label": "area",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 66,
            "contract": "contracts/Backend.sol:Backend",
            "label": "reportedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 68,
            "contract": "contracts/Backend.sol:Backend",
            "label": "isPaid",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 70,
            "contract": "contracts/Backend.sol:Backend",
            "label": "fineAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}