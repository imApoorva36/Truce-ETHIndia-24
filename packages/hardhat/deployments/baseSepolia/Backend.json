{
  "address": "0x49ff6773611575eF4c42F5B5696e4291B161DD1c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pubkeyHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "violationIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FinePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardBalance",
          "type": "uint256"
        }
      ],
      "name": "RewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        }
      ],
      "name": "UserCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "violationType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "reportedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fineAmount",
          "type": "uint256"
        }
      ],
      "name": "ViolationReported",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anonAadhaarVerifierAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convertPointsToRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_vehicleType",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nullifierSeed1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifier1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "revealArray",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "groth16Proof1",
              "type": "uint256[8]"
            }
          ],
          "internalType": "struct Backend.CreateUserParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createUser",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "finesPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsersAndPoints",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "basenames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "points",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsersAndViolations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "userAddresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "basenames",
          "type": "string[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "violationType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "reportedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fineAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Backend.Violation[][]",
          "name": "violations",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "getUserDetailsByAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_basename",
          "type": "string"
        }
      ],
      "name": "getUserDetailsByBasename",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserViolations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "violationType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "reportedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fineAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Backend.Violation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_violationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "revealArray",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[8]",
          "name": "groth16Proof",
          "type": "uint256[8]"
        }
      ],
      "name": "payFine",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_violationType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_area",
          "type": "string"
        }
      ],
      "name": "reportViolation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storedPublicKeyHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_points",
          "type": "uint256"
        }
      ],
      "name": "updatePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newReward",
          "type": "uint256"
        }
      ],
      "name": "updateUserReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "vehicleToUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "violationFines",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x057dcb710c9589622d4b1f5bcfbba684d577262df11777c3d2a545f75f9be456",
  "receipt": {
    "to": null,
    "from": "0x5a4983927dCEe4aF40E5829Eb890698e63C9e3ce",
    "contractAddress": "0x49ff6773611575eF4c42F5B5696e4291B161DD1c",
    "transactionIndex": 5,
    "gasUsed": "2690531",
    "logsBloom": "0x
    "blockHash": "0xf30f2b5891f2237d31ab5dde52aff65c9a919742f2eb71b2d539906bce6c090f",
    "transactionHash": "0x057dcb710c9589622d4b1f5bcfbba684d577262df11777c3d2a545f75f9be456",
    "logs": [],
    "blockNumber": 18920063,
    "cumulativeGasUsed": "3825774",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4C4d6c21F1D8e4591a69f7662b6EcE0f2f0E61b",
    "0x6E1c757A9E94f5D78c053A0d5Dd6854619095B88",
    "7159552241047614681013946344274430157054820687880791674287250194862110506098"
  ],
  "numDeployments": 12,
  "solcInputHash": "4eacab5099d3d919007b4ac5dc68ba7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pubkeyHash\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"violationIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FinePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardBalance\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"name\":\"ViolationReported\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anonAadhaarVerifierAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertPointsToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vehicleRegistrationNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vehicleType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nullifierSeed1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof1\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct Backend.CreateUserParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"finesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersAndPoints\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"basenames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"points\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersAndViolations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"basenames\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Backend.Violation[][]\",\"name\":\"violations\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getUserDetailsByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_basename\",\"type\":\"string\"}],\"name\":\"getUserDetailsByBasename\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserViolations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Backend.Violation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_violationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof\",\"type\":\"uint256[8]\"}],\"name\":\"payFine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_violationType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_area\",\"type\":\"string\"}],\"name\":\"reportViolation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedPublicKeyHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"updatePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"updateUserReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"vehicleToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"violationFines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Backend.sol\":\"Backend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaar {\\n    function verifyAnonAadhaarProof(\\n        uint nullifierSeed,\\n        uint nullifier,\\n        uint timestamp,\\n        uint signal,\\n        uint[4] memory revealArray,\\n        uint[8] memory groth16Proof\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3d0247e04707d2266471efeef4ab38ecf879cc286217ad5f624d966608e8964d\",\"license\":\"GPL-3.0\"},\"@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaarVote {\\n\\n    struct Proposal {\\n        string description;\\n        uint256 voteCount;\\n    }\\n\\n    event Voted(address indexed _from, uint256 indexed _propositionIndex);\\n}\",\"keccak256\":\"0xd67f99d608c3765f289f7561231f806ab439964dca134728973be60dee700eb0\",\"license\":\"GPL-3.0\"},\"contracts/Backend.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol\\\";\\r\\nimport \\\"@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol\\\";\\r\\nimport \\\"../interfaces/IAnonDigiLockerGroth16Verifier.sol\\\";\\r\\nimport \\\"../interfaces/IAnonDigiLocker.sol\\\";\\r\\n\\r\\ncontract Backend {\\r\\n    address public anonAadhaarVerifierAddr;\\r\\n    address public verifier;\\r\\n    uint256 public immutable storedPublicKeyHash;\\r\\n    address[] public allUsers; // Array to track all user addresses\\r\\n    struct User {\\r\\n        string basename;\\r\\n        string vehicleRegistrationNumber;\\r\\n        string vehicleType;\\r\\n        address walletAddress; // keep only this one\\r\\n        uint256 pendingFines;\\r\\n        uint256 rewardBalance;\\r\\n        uint256 points; // Added points field\\r\\n    }\\r\\n\\r\\n    struct Violation {\\r\\n        uint256 time;\\r\\n        string violationType;\\r\\n        string area; // Add area field\\r\\n        address reportedBy;\\r\\n        bool isPaid;\\r\\n        uint256 fineAmount;\\r\\n    }\\r\\n\\r\\n    struct CreateUserParams {\\r\\n        uint256 nullifierSeed1;\\r\\n        uint256 nullifier1;\\r\\n        uint256 timestamp;\\r\\n        uint256[4] revealArray;\\r\\n        uint256[8] groth16Proof1;\\r\\n        // uint256 nullifier2;\\r\\n        // uint256 nullifierSeed2;\\r\\n        // uint256 documentType;\\r\\n        // uint256 reveal;\\r\\n        // uint256 signal;\\r\\n        // uint256[8] groth16Proof2;\\r\\n    }\\r\\n\\r\\n    uint256 public totalRewardPool;\\r\\n    mapping(address => User) public users;\\r\\n    mapping(string => address) public vehicleToUser;\\r\\n    mapping(address => Violation[]) userViolations;\\r\\n    mapping(address => uint256) public finesPaid;\\r\\n    mapping(string => uint256) public violationFines;\\r\\n\\r\\n    event UserCreated(address indexed userAddress, string name, string vehicleRegistrationNumber);\\r\\n    event RewardUpdated(address indexed user, uint256 newRewardBalance);\\r\\n    event ViolationReported(address indexed user, string violationType, address reportedBy, uint256 fineAmount);\\r\\n    event FinePaid(address indexed user, uint256 violationIndex, uint256 amount);\\r\\n\\r\\n    constructor(address _verifierAddr, address _verifier, uint256 _pubkeyHash) {\\r\\n        verifier = _verifier;\\r\\n        // Initialize some dummy fine amounts for violation types\\r\\n        anonAadhaarVerifierAddr = _verifierAddr;\\r\\n        storedPublicKeyHash = _pubkeyHash;\\r\\n        violationFines[\\\"Speeding\\\"] = 80;\\r\\n        violationFines[\\\"Parking\\\"] = 40;\\r\\n        violationFines[\\\"Red Light\\\"] = 60;\\r\\n        violationFines[\\\"Wrong way\\\"] = 90;\\r\\n        totalRewardPool = 1000; // Initialize with 1000\\r\\n    }\\r\\n\\r\\n    // ---------------------- REWARDS SYSTEM FUNCTIONS ----------------------\\r\\n\\r\\n    // Function to add to the total reward pool\\r\\n    function updateUserReward(address _user, uint256 _newReward) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n\\r\\n        users[_user].rewardBalance = _newReward;\\r\\n        emit RewardUpdated(_user, _newReward);\\r\\n    }\\r\\n\\r\\n    // Function to fetch a user's reward balance\\r\\n    function getMyRewards() public view returns (uint256) {\\r\\n        User storage user = users[msg.sender];\\r\\n        return user.rewardBalance;\\r\\n    }\\r\\n\\r\\n    function addressToUint256(address _addr) private pure returns (uint256) {\\r\\n        return uint256(uint160(_addr));\\r\\n    }\\r\\n\\r\\n    function _hash(uint256 message) private pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(message))) >> 3;\\r\\n    }\\r\\n\\r\\n    function verifyAnonAadhaar(\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 nullifier,\\r\\n        uint256 timestamp,\\r\\n        uint256[4] memory revealArray,\\r\\n        uint256[8] memory groth16Proof\\r\\n    ) internal returns (bool) {\\r\\n        return\\r\\n            IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\r\\n                nullifierSeed,\\r\\n                nullifier,\\r\\n                timestamp,\\r\\n                addressToUint256(msg.sender),\\r\\n                revealArray,\\r\\n                groth16Proof\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function verifyDigiLocker(\\r\\n        uint256[8] memory proof,\\r\\n        uint256 nullifier,\\r\\n        uint256 documentType,\\r\\n        uint256 reveal,\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 signal\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 signalHash = _hash(signal);\\r\\n        return\\r\\n            IAnonDigiLockerGroth16Verifier(verifier).verifyProof(\\r\\n                [proof[0], proof[1]],\\r\\n                [[proof[2], proof[3]], [proof[4], proof[5]]],\\r\\n                [proof[6], proof[7]],\\r\\n                [storedPublicKeyHash, nullifier, documentType, reveal, nullifierSeed, signalHash]\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // Create a new user\\r\\n    function createUser(\\r\\n        string memory _basename,\\r\\n        string memory _vehicleRegistrationNumber,\\r\\n        string memory _vehicleType,\\r\\n        CreateUserParams memory params // removed _userAddress parameter\\r\\n    ) public payable {\\r\\n        require(users[msg.sender].walletAddress == address(0), \\\"User already exists\\\");\\r\\n\\r\\n        bool isValid = verifyAnonAadhaar(\\r\\n            params.nullifierSeed1,\\r\\n            params.nullifier1,\\r\\n            params.timestamp,\\r\\n            params.revealArray,\\r\\n            params.groth16Proof1\\r\\n        );\\r\\n        require(isValid, \\\"[AnonAadhaarVote]: proof sent is not valid.\\\");\\r\\n\\r\\n        // bool isValid2 = verifyDigiLocker(\\r\\n        //     params.groth16Proof2,\\r\\n        //     params.nullifier2,\\r\\n        //     params.documentType,\\r\\n        //     params.reveal,\\r\\n        //     params.nullifierSeed2,\\r\\n        //     params.signal\\r\\n        // );\\r\\n        // require(isValid || isValid2, 'Proof sent is not valid.');\\r\\n        // require(isValid2, '[AnonAadhaarVote]: DL Proof sent is not valid.');\\r\\n\\r\\n        users[msg.sender] = User({\\r\\n            basename: _basename,\\r\\n            vehicleRegistrationNumber: _vehicleRegistrationNumber,\\r\\n            vehicleType: _vehicleType,\\r\\n            walletAddress: msg.sender,\\r\\n            pendingFines: 0,\\r\\n            rewardBalance: 0,\\r\\n            points: 100 // Start with 100 points\\r\\n        });\\r\\n        allUsers.push(msg.sender); // Add this line after creating new user\\r\\n        vehicleToUser[_vehicleRegistrationNumber] = msg.sender;\\r\\n        emit UserCreated(msg.sender, _basename, _vehicleRegistrationNumber);\\r\\n    }\\r\\n\\r\\n    // Report a violation\\r\\n    function reportViolation(\\r\\n        address _user,\\r\\n        string memory _violationType,\\r\\n        uint256 _timestamp,\\r\\n        string memory _area\\r\\n    ) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        require(violationFines[_violationType] > 0, \\\"Invalid violation type\\\");\\r\\n        require(_timestamp <= block.timestamp, \\\"Invalid timestamp\\\");\\r\\n\\r\\n        uint256 fineAmount = violationFines[_violationType];\\r\\n        userViolations[_user].push(\\r\\n            Violation({\\r\\n                time: _timestamp,\\r\\n                violationType: _violationType,\\r\\n                area: _area,\\r\\n                reportedBy: msg.sender,\\r\\n                isPaid: false,\\r\\n                fineAmount: fineAmount\\r\\n            })\\r\\n        );\\r\\n        users[_user].pendingFines++;\\r\\n        emit ViolationReported(_user, _violationType, msg.sender, fineAmount);\\r\\n    }\\r\\n\\r\\n    // Fetch all violations of a user\\r\\n    function getUserViolations(address _user) public view returns (Violation[] memory) {\\r\\n        return userViolations[_user];\\r\\n    }\\r\\n\\r\\n    // Pay a fine\\r\\n    function payFine(\\r\\n        address _user,\\r\\n        uint256 _violationIndex,\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 nullifier,\\r\\n        uint256 timestamp,\\r\\n        uint256[4] memory revealArray,\\r\\n        uint256[8] memory groth16Proof\\r\\n    ) public payable {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        require(!userViolations[_user][_violationIndex].isPaid, \\\"Fine already paid\\\");\\r\\n        bool isValid = IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\r\\n            nullifierSeed,\\r\\n            nullifier,\\r\\n            timestamp,\\r\\n            addressToUint256(msg.sender),\\r\\n            revealArray,\\r\\n            groth16Proof\\r\\n        );\\r\\n        require(isValid, \\\"[AnonAadhaarVote]: proof sent is not valid.\\\");\\r\\n\\r\\n        Violation storage violation = userViolations[_user][_violationIndex];\\r\\n        require(msg.value == violation.fineAmount, \\\"Payment must be equal to the fine amount\\\");\\r\\n\\r\\n        violation.isPaid = true;\\r\\n        users[_user].pendingFines--;\\r\\n        finesPaid[_user] += msg.value;\\r\\n        totalRewardPool += msg.value; // Add fine amount to total reward pool\\r\\n        emit FinePaid(_user, _violationIndex, msg.value);\\r\\n    }\\r\\n\\r\\n    function updatePoints(address _user, uint256 _points) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        users[_user].points = _points;\\r\\n    }\\r\\n\\r\\n    function convertPointsToRewards() public {\\r\\n        User storage user = users[msg.sender];\\r\\n        require(user.points > 0, \\\"No points to convert\\\");\\r\\n        require(totalRewardPool > 0, \\\"Reward pool is empty\\\");\\r\\n\\r\\n        // Calculate total points in the system\\r\\n        uint256 totalPoints = 0;\\r\\n        address[] memory userAddresses = new address[](1);\\r\\n        for (uint i = 0; i < userAddresses.length; i++) {\\r\\n            totalPoints += users[userAddresses[i]].points;\\r\\n        }\\r\\n        require(totalPoints > 0, \\\"No points in the system\\\");\\r\\n\\r\\n        // Calculate user's share of the reward pool\\r\\n        uint256 rewardShare = (user.points * totalRewardPool) / totalPoints;\\r\\n\\r\\n        // Ensure contract has enough Ether\\r\\n        require(address(this).balance >= rewardShare, \\\"Not enough funds in contract to pay rewards\\\");\\r\\n\\r\\n        // Transfer reward to the user's wallet\\r\\n        (bool success, ) = msg.sender.call{ value: rewardShare }(\\\"\\\");\\r\\n        require(success, \\\"Reward transfer failed\\\");\\r\\n\\r\\n        // Update user's internal balances\\r\\n        user.rewardBalance += rewardShare; // For internal tracking\\r\\n        user.points = 0; // Reset points after conversion\\r\\n        totalRewardPool -= rewardShare;\\r\\n\\r\\n        emit RewardUpdated(msg.sender, user.rewardBalance);\\r\\n    }\\r\\n\\r\\n    function getContractBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getUserDetailsByAddress(\\r\\n        address _walletAddress\\r\\n    ) public view returns (\\r\\n        string memory basename,\\r\\n        string memory vehicleNumber,\\r\\n        string memory vehicleType,\\r\\n        uint256 pendingFines,\\r\\n        uint256 rewardBalance,\\r\\n        uint256 points\\r\\n    ) {\\r\\n        require(users[_walletAddress].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        User memory user = users[_walletAddress];\\r\\n        return (\\r\\n            user.basename,\\r\\n            user.vehicleRegistrationNumber,\\r\\n            user.vehicleType,\\r\\n            user.pendingFines,\\r\\n            user.rewardBalance,\\r\\n            user.points\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getUserDetailsByBasename(\\r\\n        string memory _basename\\r\\n    ) public view returns (\\r\\n        string memory basename,\\r\\n        string memory vehicleNumber,\\r\\n        string memory vehicleType,\\r\\n        address walletAddress,\\r\\n        uint256 pendingFines,\\r\\n        uint256 rewardBalance,\\r\\n        uint256 points\\r\\n    ) {\\r\\n        address userAddress;\\r\\n        for (uint i = 0; i < allUsers.length; i++) {\\r\\n            if (keccak256(bytes(users[allUsers[i]].basename)) == keccak256(bytes(_basename))) {\\r\\n                userAddress = allUsers[i];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(userAddress != address(0), \\\"User not found\\\");\\r\\n        \\r\\n        User memory user = users[userAddress];\\r\\n        return (\\r\\n            user.basename,\\r\\n            user.vehicleRegistrationNumber,\\r\\n            user.vehicleType,\\r\\n            user.walletAddress,\\r\\n            user.pendingFines,\\r\\n            user.rewardBalance,\\r\\n            user.points\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAllUsersAndPoints()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string[] memory basenames, // changed from usernames to basenames\\r\\n            uint256[] memory points\\r\\n        )\\r\\n    {\\r\\n        uint256 totalUsers = allUsers.length;\\r\\n        basenames = new string[](totalUsers); // changed variable name\\r\\n        points = new uint256[](totalUsers);\\r\\n\\r\\n        for (uint256 i = 0; i < totalUsers; i++) {\\r\\n            address userAddress = allUsers[i];\\r\\n            basenames[i] = users[userAddress].basename; // changed variable name\\r\\n            points[i] = users[userAddress].points;\\r\\n        }\\r\\n\\r\\n        return (basenames, points); // changed return variable name\\r\\n    }\\r\\n\\r\\n    function getUserPoints(address _userAddress) public view returns (uint256) {\\r\\n        require(users[_userAddress].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        return users[_userAddress].points;\\r\\n    }\\r\\n\\r\\n    function getAllUsersAndViolations() public view returns (\\r\\n        address[] memory userAddresses,\\r\\n        string[] memory basenames,\\r\\n        Violation[][] memory violations\\r\\n    ) {\\r\\n        uint256 totalUsers = allUsers.length;\\r\\n        userAddresses = new address[](totalUsers);\\r\\n        basenames = new string[](totalUsers);\\r\\n        violations = new Violation[][](totalUsers);\\r\\n\\r\\n        for (uint256 i = 0; i < totalUsers; i++) {\\r\\n            address userAddr = allUsers[i];\\r\\n            userAddresses[i] = userAddr;\\r\\n            basenames[i] = users[userAddr].basename;\\r\\n            violations[i] = userViolations[userAddr];\\r\\n        }\\r\\n\\r\\n        return (userAddresses, basenames, violations);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2cfc9d16715ad3282b6124f388334dedd7ce9af58fc83a15ef529e9a45541218\"},\"interfaces/IAnonDigiLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IAnonDigiLocker {\\r\\n    function verifyAnonDigiLockerProof(\\r\\n        uint nullifierSeed,\\r\\n        uint nullifier,\\r\\n        uint documentType,\\r\\n        uint reveal,\\r\\n        uint signal,\\r\\n        uint[8] memory groth16Proof\\r\\n    ) external view returns (bool);\\r\\n}\",\"keccak256\":\"0xa439945492521c630df6b85ddb854ae605cf7ce575a3096c5ed36a68b3a63c20\",\"license\":\"GPL-3.0\"},\"interfaces/IAnonDigiLockerGroth16Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IAnonDigiLockerGroth16Verifier {\\r\\n    function verifyProof(\\r\\n        uint[2] calldata _pA,\\r\\n        uint[2][2] calldata _pB,\\r\\n        uint[2] calldata _pC,\\r\\n        uint[6] calldata publicInputs\\r\\n    ) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x12e25353cfe33f9908962e504034c2fd788580fd61efb7aa680c40e58468992f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806364eef57e116100b6578063a2bdedf41161006f578063a2bdedf4146103f2578063a87430ba14610412578063aeefe31f14610432578063d0b9cf2414610452578063eca7e54d1461047f578063ff80b1e81461049257600080fd5b806364eef57e146102fd5780636f9fb98a1461031257806370c511391461032557806372ff68391461036657806396ab4bab146103865780639c895b0a146103be57600080fd5b8063271fbd0911610108578063271fbd091461022e5780632af07424146102435780632b7ac3f3146102635780632f24225c146102835780635393edab146102a65780635cd79836146102d857600080fd5b8063081bfd5e1461014557806309c85e24146101725780630a25e2f8146101965780630dbffbcd146101c3578063190d2e90146101fb575b600080fd5b34801561015157600080fd5b5061015a6104b2565b6040516101699392919061212f565b60405180910390f35b34801561017e57600080fd5b5061018860035481565b604051908152602001610169565b3480156101a257600080fd5b506101886101b136600461229c565b60076020526000908152604090205481565b3480156101cf57600080fd5b506000546101e3906001600160a01b031681565b6040516001600160a01b039091168152602001610169565b34801561020757600080fd5b5061021b610216366004612388565b6108d7565b60405161016997969594939291906123c4565b61024161023c3660046124fc565b610c3e565b005b34801561024f57600080fd5b5061024161025e36600461256a565b610f0e565b34801561026f57600080fd5b506001546101e3906001600160a01b031681565b34801561028f57600080fd5b50610298610f67565b604051610169929190612594565b3480156102b257600080fd5b506102c66102c136600461229c565b61114e565b604051610169969594939291906125eb565b3480156102e457600080fd5b5033600090815260046020526040902060050154610188565b34801561030957600080fd5b506102416113d6565b34801561031e57600080fd5b5047610188565b34801561033157600080fd5b506101e3610340366004612388565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b34801561037257600080fd5b50610241610381366004612643565b6116ea565b34801561039257600080fd5b506101886103a1366004612388565b805160208183018101805160088252928201919093012091525481565b3480156103ca57600080fd5b506101887f000000000000000000000000000000000000000000000000000000000000000081565b3480156103fe57600080fd5b506101e361040d3660046126c0565b611919565b34801561041e57600080fd5b5061021b61042d36600461229c565b611943565b34801561043e57600080fd5b5061018861044d36600461229c565b611b20565b34801561045e57600080fd5b5061047261046d36600461229c565b611b7b565b60405161016991906126d9565b61024161048d366004612793565b611d54565b34801561049e57600080fd5b506102416104ad36600461256a565b611f70565b60025460609081908190806001600160401b038111156104d4576104d46122be565b6040519080825280602002602001820160405280156104fd578160200160208202803683370190505b509350806001600160401b03811115610518576105186122be565b60405190808252806020026020018201604052801561054b57816020015b60608152602001906001900390816105365790505b509250806001600160401b03811115610566576105666122be565b60405190808252806020026020018201604052801561059957816020015b60608152602001906001900390816105845790505b50915060005b818110156108d0576000600282815481106105bc576105bc61287d565b9060005260206000200160009054906101000a90046001600160a01b03169050808683815181106105ef576105ef61287d565b6001600160a01b039283166020918202929092018101919091529082166000908152600490915260409020805461062590612893565b80601f016020809104026020016040519081016040528092919081815260200182805461065190612893565b801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b50505050508583815181106106b5576106b561287d565b602002602001018190525060066000826001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561089b57838290600052602060002090600502016040518060c00160405290816000820154815260200160018201805461074290612893565b80601f016020809104026020016040519081016040528092919081815260200182805461076e90612893565b80156107bb5780601f10610790576101008083540402835291602001916107bb565b820191906000526020600020905b81548152906001019060200180831161079e57829003601f168201915b505050505081526020016002820180546107d490612893565b80601f016020809104026020016040519081016040528092919081815260200182805461080090612893565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b505050918352505060038201546001600160a01b038116602080840191909152600160a01b90910460ff16151560408301526004909201546060909101529082526001929092019101610705565b505050508483815181106108b1576108b161287d565b60200260200101819052505080806108c8906128e3565b91505061059f565b5050909192565b60608080600080808080805b60025481101561098d578980519060200120600460006002848154811061090c5761090c61287d565b60009182526020808320909101546001600160a01b031683528201929092526040908101909120905161093f91906128fc565b60405180910390200361097b576002818154811061095f5761095f61287d565b6000918252602090912001546001600160a01b0316915061098d565b80610985816128e3565b9150506108e3565b506001600160a01b0381166109da5760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b60448201526064015b60405180910390fd5b6001600160a01b038116600090815260046020526040808220815160e08101909252805482908290610a0b90612893565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3790612893565b8015610a845780601f10610a5957610100808354040283529160200191610a84565b820191906000526020600020905b815481529060010190602001808311610a6757829003601f168201915b50505050508152602001600182018054610a9d90612893565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac990612893565b8015610b165780601f10610aeb57610100808354040283529160200191610b16565b820191906000526020600020905b815481529060010190602001808311610af957829003601f168201915b50505050508152602001600282018054610b2f90612893565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5b90612893565b8015610ba85780601f10610b7d57610100808354040283529160200191610ba8565b820191906000526020600020905b815481529060010190602001808311610b8b57829003601f168201915b505050505081526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815250509050806000015181602001518260400151836060015184608001518560a001518660c0015198509850985098509850985098505050919395979092949650565b6001600160a01b0387811660009081526004602052604090206003015416610c785760405162461bcd60e51b81526004016109d190612972565b6001600160a01b0387166000908152600660205260409020805487908110610ca257610ca261287d565b906000526020600020906005020160030160149054906101000a900460ff1615610d025760405162461bcd60e51b8152602060048201526011602482015270119a5b9948185b1c9958591e481c185a59607a1b60448201526064016109d1565b600080546001600160a01b03166350de0e578787873388886040518763ffffffff1660e01b8152600401610d3b9695949392919061299f565b602060405180830381865afa158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c9190612a1b565b905080610d9b5760405162461bcd60e51b81526004016109d190612a3d565b6001600160a01b0388166000908152600660205260408120805489908110610dc557610dc561287d565b9060005260206000209060050201905080600401543414610e395760405162461bcd60e51b815260206004820152602860248201527f5061796d656e74206d75737420626520657175616c20746f207468652066696e6044820152671948185b5bdd5b9d60c21b60648201526084016109d1565b60038101805460ff60a01b1916600160a01b1790556001600160a01b0389166000908152600460208190526040822001805491610e7583612a88565b90915550506001600160a01b03891660009081526007602052604081208054349290610ea2908490612a9f565b925050819055503460036000828254610ebb9190612a9f565b9091555050604080518981523460208201526001600160a01b038b16917f7cf7727a6ea8ffa8b0fa4c048af68e653cbe5008f79a2ab7518ef64d667f9095910160405180910390a2505050505050505050565b6001600160a01b0382811660009081526004602052604090206003015416610f485760405162461bcd60e51b81526004016109d190612972565b6001600160a01b03909116600090815260046020526040902060060155565b6002546060908190806001600160401b03811115610f8757610f876122be565b604051908082528060200260200182016040528015610fba57816020015b6060815260200190600190039081610fa55790505b509250806001600160401b03811115610fd557610fd56122be565b604051908082528060200260200182016040528015610ffe578160200160208202803683370190505b50915060005b81811015611148576000600282815481106110215761102161287d565b60009182526020808320909101546001600160a01b03168083526004909152604090912080549192509061105490612893565b80601f016020809104026020016040519081016040528092919081815260200182805461108090612893565b80156110cd5780601f106110a2576101008083540402835291602001916110cd565b820191906000526020600020905b8154815290600101906020018083116110b057829003601f168201915b50505050508583815181106110e4576110e461287d565b602002602001018190525060046000826001600160a01b03166001600160a01b031681526020019081526020016000206006015484838151811061112a5761112a61287d565b60209081029190910101525080611140816128e3565b915050611004565b50509091565b6001600160a01b0381811660009081526004602052604081206003015460609283928392909182918291166111955760405162461bcd60e51b81526004016109d190612972565b6001600160a01b038716600090815260046020526040808220815160e081019092528054829082906111c690612893565b80601f01602080910402602001604051908101604052809291908181526020018280546111f290612893565b801561123f5780601f106112145761010080835404028352916020019161123f565b820191906000526020600020905b81548152906001019060200180831161122257829003601f168201915b5050505050815260200160018201805461125890612893565b80601f016020809104026020016040519081016040528092919081815260200182805461128490612893565b80156112d15780601f106112a6576101008083540402835291602001916112d1565b820191906000526020600020905b8154815290600101906020018083116112b457829003601f168201915b505050505081526020016002820180546112ea90612893565b80601f016020809104026020016040519081016040528092919081815260200182805461131690612893565b80156113635780601f1061133857610100808354040283529160200191611363565b820191906000526020600020905b81548152906001019060200180831161134657829003601f168201915b505050918352505060038201546001600160a01b0316602080830191909152600483015460408084019190915260058401546060840152600690930154608092830152835190840151928401519184015160a085015160c090950151919d939c50919a5090985091965090945092505050565b336000908152600460205260409020600681015461142d5760405162461bcd60e51b8152602060048201526014602482015273139bc81c1bda5b9d1cc81d1bc818dbdb9d995c9d60621b60448201526064016109d1565b6000600354116114765760405162461bcd60e51b815260206004820152601460248201527352657761726420706f6f6c20697320656d70747960601b60448201526064016109d1565b6040805160018082528183019092526000918291906020808301908036833701905050905060005b815181101561150857600460008383815181106114bd576114bd61287d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060060154836114f49190612a9f565b925080611500816128e3565b91505061149e565b50600082116115595760405162461bcd60e51b815260206004820152601760248201527f4e6f20706f696e747320696e207468652073797374656d00000000000000000060448201526064016109d1565b600082600354856006015461156e9190612ab8565b6115789190612acf565b9050804710156115de5760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f7567682066756e647320696e20636f6e747261637420746f2060448201526a706179207265776172647360a81b60648201526084016109d1565b604051600090339083908381818185875af1925050503d8060008114611620576040519150601f19603f3d011682016040523d82523d6000602084013e611625565b606091505b505090508061166f5760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b60448201526064016109d1565b818560050160008282546116839190612a9f565b9091555050600060068601819055600380548492906116a3908490612af1565b9091555050600585015460405190815233907f401ccfec4c6c7ac3f3b71182750d0f8d73c0d29cc476732b0b21ab0d359da47f906020015b60405180910390a25050505050565b6001600160a01b03848116600090815260046020526040902060030154166117245760405162461bcd60e51b81526004016109d190612972565b60006008846040516117369190612b04565b9081526020016040518091039020541161178b5760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642076696f6c6174696f6e207479706560501b60448201526064016109d1565b428211156117cf5760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642074696d657374616d7607c1b60448201526064016109d1565b60006008846040516117e19190612b04565b908152604080519182900360209081018320546001600160a01b03891660009081526006835283812060c0860185528886528584018a81529486018890523360608701526080860182905260a08601839052805460018181018355918352939091208551600590940201928355925190945090918201906118629082612b6f565b50604082015160028201906118779082612b6f565b50606082015160038201805460808501511515600160a01b026001600160a81b03199091166001600160a01b039384161717905560a09092015160049182015590861660009081526020829052604081209091018054916118d7836128e3565b9190505550846001600160a01b03167faa376010f293fc2cf9fd32a4f6f25fcc273f37844a3b33f76cab5211070da1808533846040516116db93929190612c2e565b6002818154811061192957600080fd5b6000918252602090912001546001600160a01b0316905081565b60046020526000908152604090208054819061195e90612893565b80601f016020809104026020016040519081016040528092919081815260200182805461198a90612893565b80156119d75780601f106119ac576101008083540402835291602001916119d7565b820191906000526020600020905b8154815290600101906020018083116119ba57829003601f168201915b5050505050908060010180546119ec90612893565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1890612893565b8015611a655780601f10611a3a57610100808354040283529160200191611a65565b820191906000526020600020905b815481529060010190602001808311611a4857829003601f168201915b505050505090806002018054611a7a90612893565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa690612893565b8015611af35780601f10611ac857610100808354040283529160200191611af3565b820191906000526020600020905b815481529060010190602001808311611ad657829003601f168201915b5050505060038301546004840154600585015460069095015493946001600160a01b039092169390925087565b6001600160a01b03818116600090815260046020526040812060030154909116611b5c5760405162461bcd60e51b81526004016109d190612972565b506001600160a01b031660009081526004602052604090206006015490565b6001600160a01b0381166000908152600660209081526040808320805482518185028101850190935280835260609492939192909184015b82821015611d4957838290600052602060002090600502016040518060c001604052908160008201548152602001600182018054611bf090612893565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1c90612893565b8015611c695780601f10611c3e57610100808354040283529160200191611c69565b820191906000526020600020905b815481529060010190602001808311611c4c57829003601f168201915b50505050508152602001600282018054611c8290612893565b80601f0160208091040260200160405190810160405280929190818152602001828054611cae90612893565b8015611cfb5780601f10611cd057610100808354040283529160200191611cfb565b820191906000526020600020905b815481529060010190602001808311611cde57829003601f168201915b505050918352505060038201546001600160a01b038116602080840191909152600160a01b90910460ff16151560408301526004909201546060909101529082526001929092019101611bb3565b505050509050919050565b336000908152600460205260409020600301546001600160a01b031615611db35760405162461bcd60e51b81526020600482015260136024820152725573657220616c72656164792065786973747360681b60448201526064016109d1565b6000611dd682600001518360200151846040015185606001518660800151612006565b905080611df55760405162461bcd60e51b81526004016109d190612a3d565b6040805160e0810182528681526020808201879052818301869052336060830181905260006080840181905260a08401819052606460c085015290815260049091529190912081518190611e499082612b6f565b5060208201516001820190611e5e9082612b6f565b5060408201516002820190611e739082612b6f565b5060608201516003820180546001600160a01b039092166001600160a01b03199283161790556080830151600483015560a083015160058084019190915560c090930151600690920191909155600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805490911633908117909155604051909190611f0f908790612b04565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915533907fa2e1d286e25c6fce64acccdfd7a54d53cce2f617ddff648ab1dbb3458ccdd95b906116db9088908890612c5c565b6001600160a01b0382811660009081526004602052604090206003015416611faa5760405162461bcd60e51b81526004016109d190612972565b6001600160a01b03821660008181526004602052604090819020600501839055517f401ccfec4c6c7ac3f3b71182750d0f8d73c0d29cc476732b0b21ab0d359da47f90611ffa9084815260200190565b60405180910390a25050565b600080546001600160a01b03166350de0e578787873388886040518763ffffffff1660e01b815260040161203f9695949392919061299f565b602060405180830381865afa15801561205c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120809190612a1b565b9695505050505050565b60005b838110156120a557818101518382015260200161208d565b50506000910152565b600081518084526120c681602086016020860161208a565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156121225782840389526121108483516120ae565b988501989350908401906001016120f8565b5091979650505050505050565b606080825284519082018190526000906020906080840190828801845b828110156121715781516001600160a01b03168452928401929084019060010161214c565b5050508381038285015261218581876120da565b905083810360408501528085518083528383019150838160051b84010184880160005b8381101561227057601f1986840381018652825180518086529089019089860190600581901b87018b0160005b8281101561225957858983030184528451805183528d81015160c08f85015261220160c08501826120ae565b90506040820151848203604086015261221a82826120ae565b6060848101516001600160a01b03169087015260808085015115159087015260a09384015193909501929092525050938c0193928c01926001016121d5565b50988b0198965050509288019250506001016121a8565b50909a9950505050505050505050565b80356001600160a01b038116811461229757600080fd5b919050565b6000602082840312156122ae57600080fd5b6122b782612280565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156122f6576122f66122be565b60405290565b600082601f83011261230d57600080fd5b81356001600160401b0380821115612327576123276122be565b604051601f8301601f19908116603f0116810190828211818310171561234f5761234f6122be565b8160405283815286602085880101111561236857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561239a57600080fd5b81356001600160401b038111156123b057600080fd5b6123bc848285016122fc565b949350505050565b60e0815260006123d760e083018a6120ae565b82810360208401526123e9818a6120ae565b905082810360408401526123fd81896120ae565b6001600160a01b039790971660608401525050608081019390935260a083019190915260c0909101529392505050565b600082601f83011261243e57600080fd5b604051608081018181106001600160401b0382111715612460576124606122be565b60405280608084018581111561247557600080fd5b845b8181101561248f578035835260209283019201612477565b509195945050505050565b600082601f8301126124ab57600080fd5b6040516101008082018281106001600160401b03821117156124cf576124cf6122be565b604052830181858211156124e257600080fd5b845b8281101561248f5780358252602091820191016124e4565b6000806000806000806000610220888a03121561251857600080fd5b61252188612280565b96506020880135955060408801359450606088013593506080880135925061254c8960a08a0161242d565b915061255c896101208a0161249a565b905092959891949750929550565b6000806040838503121561257d57600080fd5b61258683612280565b946020939093013593505050565b6040815260006125a760408301856120da565b82810360208481019190915284518083528582019282019060005b818110156125de578451835293830193918301916001016125c2565b5090979650505050505050565b60c0815260006125fe60c08301896120ae565b828103602084015261261081896120ae565b9050828103604084015261262481886120ae565b60608401969096525050608081019290925260a0909101529392505050565b6000806000806080858703121561265957600080fd5b61266285612280565b935060208501356001600160401b038082111561267e57600080fd5b61268a888389016122fc565b94506040870135935060608701359150808211156126a757600080fd5b506126b4878288016122fc565b91505092959194509250565b6000602082840312156126d257600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561278557603f19898403018552815160c08151855288820151818a87015261272e828701826120ae565b915050878201518582038987015261274682826120ae565b6060848101516001600160a01b03169088015260808085015115159088015260a093840151939096019290925250509386019390860190600101612700565b509098975050505050505050565b6000806000808486036102408112156127ab57600080fd5b85356001600160401b03808211156127c257600080fd5b6127ce89838a016122fc565b965060208801359150808211156127e457600080fd5b6127f089838a016122fc565b9550604088013591508082111561280657600080fd5b50612813888289016122fc565b9350506101e0605f198201121561282957600080fd5b506128326122d4565b606086013581526080860135602082015260a0860135604082015261285a8760c0880161242d565b606082015261286d87610140880161249a565b6080820152939692955090935050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806128a757607f821691505b6020821081036128c757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016128f5576128f56128cd565b5060010190565b600080835461290a81612893565b60018281168015612922576001811461293757612966565b60ff1984168752821515830287019450612966565b8760005260208060002060005b8581101561295d5781548a820152908401908201612944565b50505082870194505b50929695505050505050565b602080825260139082015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60006102008201905087825260208781840152866040840152856060840152608083018560005b60048110156129e3578151835291830191908301906001016129c6565b50505061010083018460005b6008811015612a0c578151835291830191908301906001016129ef565b50505050979650505050505050565b600060208284031215612a2d57600080fd5b815180151581146122b757600080fd5b6020808252602b908201527f5b416e6f6e41616468616172566f74655d3a2070726f6f662073656e7420697360408201526a103737ba103b30b634b21760a91b606082015260800190565b600081612a9757612a976128cd565b506000190190565b80820180821115612ab257612ab26128cd565b92915050565b8082028115828204841417612ab257612ab26128cd565b600082612aec57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115612ab257612ab26128cd565b60008251612b1681846020870161208a565b9190910192915050565b601f821115612b6a57600081815260208120601f850160051c81016020861015612b475750805b601f850160051c820191505b81811015612b6657828155600101612b53565b5050505b505050565b81516001600160401b03811115612b8857612b886122be565b612b9c81612b968454612893565b84612b20565b602080601f831160018114612bd15760008415612bb95750858301515b600019600386901b1c1916600185901b178555612b66565b600085815260208120601f198616915b82811015612c0057888601518255948401946001909101908401612be1565b5085821015612c1e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612c4160608301866120ae565b6001600160a01b039490941660208301525060400152919050565b604081526000612c6f60408301856120ae565b8281036020840152612c8181856120ae565b9594505050505056fea2646970667358221220c142a66c4c82fbaec09322396325b1ea8528c24695ee9ec9d1bc9fbc99ee5fe064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 45,
        "contract": "contracts/Backend.sol:Backend",
        "label": "anonAadhaarVerifierAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 47,
        "contract": "contracts/Backend.sol:Backend",
        "label": "verifier",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 52,
        "contract": "contracts/Backend.sol:Backend",
        "label": "allUsers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 97,
        "contract": "contracts/Backend.sol:Backend",
        "label": "totalRewardPool",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 102,
        "contract": "contracts/Backend.sol:Backend",
        "label": "users",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(User)67_storage)"
      },
      {
        "astId": 106,
        "contract": "contracts/Backend.sol:Backend",
        "label": "vehicleToUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 112,
        "contract": "contracts/Backend.sol:Backend",
        "label": "userViolations",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Violation)80_storage)dyn_storage)"
      },
      {
        "astId": 116,
        "contract": "contracts/Backend.sol:Backend",
        "label": "finesPaid",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 120,
        "contract": "contracts/Backend.sol:Backend",
        "label": "violationFines",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Violation)80_storage)dyn_storage": {
        "base": "t_struct(Violation)80_storage",
        "encoding": "dynamic_array",
        "label": "struct Backend.Violation[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Violation)80_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.Violation[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Violation)80_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(User)67_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)67_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(User)67_storage": {
        "encoding": "inplace",
        "label": "struct Backend.User",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/Backend.sol:Backend",
            "label": "basename",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 56,
            "contract": "contracts/Backend.sol:Backend",
            "label": "vehicleRegistrationNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 58,
            "contract": "contracts/Backend.sol:Backend",
            "label": "vehicleType",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 60,
            "contract": "contracts/Backend.sol:Backend",
            "label": "walletAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 62,
            "contract": "contracts/Backend.sol:Backend",
            "label": "pendingFines",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 64,
            "contract": "contracts/Backend.sol:Backend",
            "label": "rewardBalance",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 66,
            "contract": "contracts/Backend.sol:Backend",
            "label": "points",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Violation)80_storage": {
        "encoding": "inplace",
        "label": "struct Backend.Violation",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/Backend.sol:Backend",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 71,
            "contract": "contracts/Backend.sol:Backend",
            "label": "violationType",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 73,
            "contract": "contracts/Backend.sol:Backend",
            "label": "area",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 75,
            "contract": "contracts/Backend.sol:Backend",
            "label": "reportedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 77,
            "contract": "contracts/Backend.sol:Backend",
            "label": "isPaid",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 79,
            "contract": "contracts/Backend.sol:Backend",
            "label": "fineAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}