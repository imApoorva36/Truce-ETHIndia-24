{
  "address": "0x7c3c329B828042AaBF4e936FdAEc29893A4d5eeE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pubkeyHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "violationIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FinePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardBalance",
          "type": "uint256"
        }
      ],
      "name": "RewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        }
      ],
      "name": "UserCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "violationType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "reportedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fineAmount",
          "type": "uint256"
        }
      ],
      "name": "ViolationReported",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anonAadhaarVerifierAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convertPointsToRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_vehicleType",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nullifierSeed1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifier1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "revealArray",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "groth16Proof1",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "nullifier2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifierSeed2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "documentType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reveal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "signal",
              "type": "uint256"
            },
            {
              "internalType": "uint256[8]",
              "name": "groth16Proof2",
              "type": "uint256[8]"
            }
          ],
          "internalType": "struct Backend.CreateUserParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createUser",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "finesPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsersAndPoints",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "basenames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "points",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "getUserDetailsByAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleNumber",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserViolations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "violationType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "reportedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fineAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Backend.Violation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_violationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "revealArray",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[8]",
          "name": "groth16Proof",
          "type": "uint256[8]"
        }
      ],
      "name": "payFine",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_violationType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_area",
          "type": "string"
        }
      ],
      "name": "reportViolation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storedPublicKeyHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_points",
          "type": "uint256"
        }
      ],
      "name": "updatePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newReward",
          "type": "uint256"
        }
      ],
      "name": "updateUserReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "vehicleToUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "violationFines",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2ff0720797a36683295516b66f780d3a3348a3e0bd29760638e8040dd16e496",
  "receipt": {
    "to": null,
    "from": "0x5a4983927dCEe4aF40E5829Eb890698e63C9e3ce",
    "contractAddress": "0x7c3c329B828042AaBF4e936FdAEc29893A4d5eeE",
    "transactionIndex": 11,
    "gasUsed": "2260531",
    "logsBloom": "0x
    "blockHash": "0xfcb5508f98519f6a9ef43c100684f83fd866c9a69e7ae541f6f598aa10068366",
    "transactionHash": "0xc2ff0720797a36683295516b66f780d3a3348a3e0bd29760638e8040dd16e496",
    "logs": [],
    "blockNumber": 18915896,
    "cumulativeGasUsed": "5732201",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4C4d6c21F1D8e4591a69f7662b6EcE0f2f0E61b",
    "0x6E1c757A9E94f5D78c053A0d5Dd6854619095B88",
    "7159552241047614681013946344274430157054820687880791674287250194862110506098"
  ],
  "numDeployments": 8,
  "solcInputHash": "0f78574e447c262ae096444192848456",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pubkeyHash\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"violationIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FinePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardBalance\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"name\":\"ViolationReported\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anonAadhaarVerifierAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertPointsToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vehicleRegistrationNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vehicleType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nullifierSeed1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof1\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"nullifier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierSeed2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reveal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signal\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof2\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct Backend.CreateUserParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"finesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersAndPoints\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"basenames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"points\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getUserDetailsByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleNumber\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserViolations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Backend.Violation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_violationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof\",\"type\":\"uint256[8]\"}],\"name\":\"payFine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_violationType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_area\",\"type\":\"string\"}],\"name\":\"reportViolation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedPublicKeyHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"updatePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"updateUserReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"vehicleToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"violationFines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Backend.sol\":\"Backend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaar {\\n    function verifyAnonAadhaarProof(\\n        uint nullifierSeed,\\n        uint nullifier,\\n        uint timestamp,\\n        uint signal,\\n        uint[4] memory revealArray,\\n        uint[8] memory groth16Proof\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3d0247e04707d2266471efeef4ab38ecf879cc286217ad5f624d966608e8964d\",\"license\":\"GPL-3.0\"},\"@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaarVote {\\n\\n    struct Proposal {\\n        string description;\\n        uint256 voteCount;\\n    }\\n\\n    event Voted(address indexed _from, uint256 indexed _propositionIndex);\\n}\",\"keccak256\":\"0xd67f99d608c3765f289f7561231f806ab439964dca134728973be60dee700eb0\",\"license\":\"GPL-3.0\"},\"contracts/Backend.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol';\\r\\nimport '@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol';\\r\\nimport \\\"../interfaces/IAnonDigiLockerGroth16Verifier.sol\\\";\\r\\nimport \\\"../interfaces/IAnonDigiLocker.sol\\\";\\r\\n\\r\\ncontract Backend {\\r\\n    address public anonAadhaarVerifierAddr;\\r\\n    address public verifier;\\r\\n    uint256 public immutable storedPublicKeyHash;\\r\\n    address[] public allUsers;  // Array to track all user addresses\\r\\n    struct User {\\r\\n        string basename;\\r\\n        string vehicleRegistrationNumber;\\r\\n        string vehicleType;\\r\\n        address walletAddress;     // keep only this one\\r\\n        uint256 pendingFines;\\r\\n        uint256 rewardBalance;\\r\\n        uint256 points;        // Added points field\\r\\n    }\\r\\n\\r\\n    struct Violation {\\r\\n        uint256 time;\\r\\n        string violationType;\\r\\n        string area;           // Add area field\\r\\n        address reportedBy;\\r\\n        bool isPaid;\\r\\n        uint256 fineAmount;\\r\\n    }\\r\\n\\r\\n    struct CreateUserParams {\\r\\n        uint256 nullifierSeed1;\\r\\n        uint256 nullifier1;\\r\\n        uint256 timestamp;\\r\\n        uint256[4] revealArray;\\r\\n        uint256[8] groth16Proof1;\\r\\n        uint256 nullifier2;\\r\\n        uint256 nullifierSeed2;\\r\\n        uint256 documentType;\\r\\n        uint256 reveal;\\r\\n        uint256 signal;\\r\\n        uint256[8] groth16Proof2;\\r\\n    }\\r\\n\\r\\n    uint256 public totalRewardPool;\\r\\n    mapping(address => User) public users;\\r\\n    mapping(string => address) public vehicleToUser;\\r\\n    mapping(address => Violation[]) userViolations;\\r\\n    mapping(address => uint256) public finesPaid;\\r\\n    mapping(string => uint256) public violationFines;\\r\\n\\r\\n    event UserCreated(address indexed userAddress, string name, string vehicleRegistrationNumber);\\r\\n    event RewardUpdated(address indexed user, uint256 newRewardBalance);\\r\\n    event ViolationReported(address indexed user, string violationType, address reportedBy, uint256 fineAmount);\\r\\n    event FinePaid(address indexed user, uint256 violationIndex, uint256 amount);\\r\\n\\r\\n    constructor(address _verifierAddr, address _verifier, uint256 _pubkeyHash) {\\r\\n        verifier=_verifier;\\r\\n        // Initialize some dummy fine amounts for violation types\\r\\n        anonAadhaarVerifierAddr = _verifierAddr;\\r\\n        storedPublicKeyHash = _pubkeyHash;\\r\\n        violationFines[\\\"Speeding\\\"] = 80;\\r\\n        violationFines[\\\"Parking\\\"] = 40;\\r\\n        violationFines[\\\"Red Light\\\"] = 60;\\r\\n        violationFines[\\\"Wrong way\\\"] = 90;\\r\\n        totalRewardPool = 1000;  // Initialize with 1000\\r\\n    }\\r\\n\\r\\n    // ---------------------- REWARDS SYSTEM FUNCTIONS ----------------------\\r\\n\\r\\n    // Function to add to the total reward pool\\r\\n   function updateUserReward(address _user, uint256 _newReward) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n\\r\\n        users[_user].rewardBalance = _newReward;\\r\\n        emit RewardUpdated(_user, _newReward);\\r\\n    }\\r\\n\\r\\n    // Function to fetch a user's reward balance\\r\\n    function getMyRewards() public view returns (uint256) {\\r\\n        User storage user = users[msg.sender];\\r\\n        require(bytes(user.vehicleRegistrationNumber).length > 0, \\\"User not registered. Please register first.\\\");\\r\\n        return user.rewardBalance;\\r\\n    }\\r\\n\\r\\n    function addressToUint256(address _addr) private pure returns (uint256) {\\r\\n        return uint256(uint160(_addr));\\r\\n    }\\r\\n\\r\\n    function _hash(uint256 message) private pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(message))) >> 3;\\r\\n    }\\r\\n\\r\\n    function verifyAnonAadhaar(\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 nullifier,\\r\\n        uint256 timestamp,\\r\\n        uint256[4] memory revealArray,\\r\\n        uint256[8] memory groth16Proof\\r\\n    ) internal returns (bool) {\\r\\n        return IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\r\\n            nullifierSeed,\\r\\n            nullifier,\\r\\n            timestamp,\\r\\n            addressToUint256(msg.sender),\\r\\n            revealArray,\\r\\n            groth16Proof\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function verifyDigiLocker(\\r\\n        uint256[8] memory proof,\\r\\n        uint256 nullifier,\\r\\n        uint256 documentType,\\r\\n        uint256 reveal,\\r\\n        uint256 nullifierSeed,\\r\\n        uint256 signal\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 signalHash = _hash(signal);\\r\\n        return IAnonDigiLockerGroth16Verifier(verifier).verifyProof(\\r\\n            [proof[0], proof[1]],\\r\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\r\\n            [proof[6], proof[7]],\\r\\n            [storedPublicKeyHash, nullifier, documentType, reveal, nullifierSeed, signalHash]\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    // Create a new user\\r\\n    function createUser(\\r\\n        string memory _basename,\\r\\n        string memory _vehicleRegistrationNumber,\\r\\n        string memory _vehicleType,\\r\\n        CreateUserParams memory params    // removed _userAddress parameter\\r\\n    ) public payable {\\r\\n        require(users[msg.sender].walletAddress == address(0), \\\"User already exists\\\");\\r\\n        \\r\\n        bool isValid = verifyAnonAadhaar(\\r\\n            params.nullifierSeed1,\\r\\n            params.nullifier1,\\r\\n            params.timestamp,\\r\\n            params.revealArray,\\r\\n            params.groth16Proof1\\r\\n        );\\r\\n        require(isValid, '[AnonAadhaarVote]: proof sent is not valid.');\\r\\n\\r\\n        bool isValid2 = verifyDigiLocker(\\r\\n            params.groth16Proof2,\\r\\n            params.nullifier2,\\r\\n            params.documentType,\\r\\n            params.reveal,\\r\\n            params.nullifierSeed2,\\r\\n            params.signal\\r\\n        );\\r\\n        require(isValid || isValid2, 'Proof sent is not valid.');\\r\\n        // require(isValid2, '[AnonAadhaarVote]: DL Proof sent is not valid.');\\r\\n\\r\\n        users[msg.sender] = User({\\r\\n            basename: _basename,\\r\\n            vehicleRegistrationNumber: _vehicleRegistrationNumber,\\r\\n            vehicleType: _vehicleType,\\r\\n            walletAddress: msg.sender,\\r\\n            pendingFines: 0,\\r\\n            rewardBalance: 0,\\r\\n            points: 100          // Start with 100 points\\r\\n        });\\r\\n        allUsers.push(msg.sender);  // Add this line after creating new user\\r\\n        vehicleToUser[_vehicleRegistrationNumber] = msg.sender;\\r\\n        emit UserCreated(msg.sender, _basename, _vehicleRegistrationNumber);\\r\\n    }\\r\\n\\r\\n    // Report a violation\\r\\n    function reportViolation(\\r\\n        address _user, \\r\\n        string memory _violationType,\\r\\n        uint256 _timestamp,\\r\\n        string memory _area\\r\\n    ) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        require(violationFines[_violationType] > 0, \\\"Invalid violation type\\\");\\r\\n        require(_timestamp <= block.timestamp, \\\"Invalid timestamp\\\");\\r\\n\\r\\n        uint256 fineAmount = violationFines[_violationType];\\r\\n        userViolations[_user].push(Violation({\\r\\n            time: _timestamp,\\r\\n            violationType: _violationType,\\r\\n            area: _area,\\r\\n            reportedBy: msg.sender,\\r\\n            isPaid: false,\\r\\n            fineAmount: fineAmount\\r\\n        }));\\r\\n        users[_user].pendingFines++;\\r\\n        emit ViolationReported(_user, _violationType, msg.sender, fineAmount);\\r\\n    }\\r\\n\\r\\n    // Fetch all violations of a user\\r\\n    function getUserViolations(address _user) public view returns (Violation[] memory) {\\r\\n        return userViolations[_user];\\r\\n    }\\r\\n\\r\\n    // Pay a fine\\r\\n    function payFine(address _user, uint256 _violationIndex, uint256 nullifierSeed,\\r\\n    uint256 nullifier,\\r\\n    uint256 timestamp,\\r\\n    uint256[4] memory revealArray,\\r\\n    uint256[8] memory groth16Proof) public payable {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        require(!userViolations[_user][_violationIndex].isPaid, \\\"Fine already paid\\\");\\r\\n        bool isValid = IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\r\\n            nullifierSeed,\\r\\n            nullifier,\\r\\n            timestamp,\\r\\n            addressToUint256(msg.sender),\\r\\n            revealArray,\\r\\n            groth16Proof\\r\\n        );\\r\\n        require(isValid, '[AnonAadhaarVote]: proof sent is not valid.');\\r\\n\\r\\n        Violation storage violation = userViolations[_user][_violationIndex];\\r\\n        require(msg.value == violation.fineAmount, \\\"Payment must be equal to the fine amount\\\");\\r\\n\\r\\n        violation.isPaid = true;\\r\\n        users[_user].pendingFines--;\\r\\n        finesPaid[_user] += msg.value;\\r\\n        totalRewardPool += msg.value;  // Add fine amount to total reward pool\\r\\n        emit FinePaid(_user, _violationIndex, msg.value);\\r\\n    }\\r\\n\\r\\n    function updatePoints(address _user, uint256 _points) public {\\r\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        users[_user].points = _points;\\r\\n    }\\r\\n\\r\\n    function convertPointsToRewards() public {\\r\\n        User storage user = users[msg.sender];\\r\\n        require(user.points > 0, \\\"No points to convert\\\");\\r\\n        require(totalRewardPool > 0, \\\"Reward pool is empty\\\");\\r\\n\\r\\n        // Calculate total points in the system\\r\\n        uint256 totalPoints = 0;\\r\\n        address[] memory userAddresses = new address[](1);\\r\\n        for (uint i = 0; i < userAddresses.length; i++) {\\r\\n            totalPoints += users[userAddresses[i]].points;\\r\\n        }\\r\\n        require(totalPoints > 0, \\\"No points in the system\\\");\\r\\n\\r\\n        // Calculate user's share of the reward pool\\r\\n        uint256 rewardShare = (user.points * totalRewardPool) / totalPoints;\\r\\n\\r\\n        // Ensure contract has enough Ether\\r\\n        require(address(this).balance >= rewardShare, \\\"Not enough funds in contract to pay rewards\\\");\\r\\n\\r\\n        // Transfer reward to the user's wallet\\r\\n        (bool success, ) = msg.sender.call{value: rewardShare}(\\\"\\\");\\r\\n        require(success, \\\"Reward transfer failed\\\");\\r\\n\\r\\n        // Update user's internal balances\\r\\n        user.rewardBalance += rewardShare; // For internal tracking\\r\\n        user.points = 0; // Reset points after conversion\\r\\n        totalRewardPool -= rewardShare;\\r\\n\\r\\n        emit RewardUpdated(msg.sender, user.rewardBalance);\\r\\n    }\\r\\n\\r\\n    function getContractBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getUserDetailsByAddress(address _walletAddress) public view returns (string memory basename, string memory vehicleNumber) {\\r\\n        require(users[_walletAddress].walletAddress != address(0), \\\"User does not exist\\\");\\r\\n        return (users[_walletAddress].basename, users[_walletAddress].vehicleRegistrationNumber);\\r\\n    }\\r\\n\\r\\n    function getAllUsersAndPoints() public view returns (\\r\\n        string[] memory basenames,    // changed from usernames to basenames\\r\\n        uint256[] memory points\\r\\n    ) {\\r\\n        uint256 totalUsers = allUsers.length;\\r\\n        basenames = new string[](totalUsers);   // changed variable name\\r\\n        points = new uint256[](totalUsers);\\r\\n        \\r\\n        for(uint256 i = 0; i < totalUsers; i++) {\\r\\n            address userAddress = allUsers[i];\\r\\n            basenames[i] = users[userAddress].basename;   // changed variable name\\r\\n            points[i] = users[userAddress].points;\\r\\n        }\\r\\n        \\r\\n        return (basenames, points);   // changed return variable name\\r\\n    }\\r\\n}\",\"keccak256\":\"0xac7fcbbe74e94d744fe05d02770824d06537b09af1b8868e2846d3ea0f1bbfcd\"},\"interfaces/IAnonDigiLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IAnonDigiLocker {\\r\\n    function verifyAnonDigiLockerProof(\\r\\n        uint nullifierSeed,\\r\\n        uint nullifier,\\r\\n        uint documentType,\\r\\n        uint reveal,\\r\\n        uint signal,\\r\\n        uint[8] memory groth16Proof\\r\\n    ) external view returns (bool);\\r\\n}\",\"keccak256\":\"0xa439945492521c630df6b85ddb854ae605cf7ce575a3096c5ed36a68b3a63c20\",\"license\":\"GPL-3.0\"},\"interfaces/IAnonDigiLockerGroth16Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IAnonDigiLockerGroth16Verifier {\\r\\n    function verifyProof(\\r\\n        uint[2] calldata _pA,\\r\\n        uint[2][2] calldata _pB,\\r\\n        uint[2] calldata _pC,\\r\\n        uint[6] calldata publicInputs\\r\\n    ) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x12e25353cfe33f9908962e504034c2fd788580fd61efb7aa680c40e58468992f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c806364eef57e116100a05780639c895b0a116100645780639c895b0a14610341578063a2bdedf414610375578063a87430ba14610395578063d0b9cf24146103c8578063ff80b1e8146103f557600080fd5b806364eef57e146102805780636f9fb98a1461029557806370c51139146102a857806372ff6839146102e957806396ab4bab1461030957600080fd5b80632af07424116100e75780632af07424146101da5780632b7ac3f3146101fa5780632f24225c1461021a5780635393edab1461023d5780635cd798361461026b57600080fd5b806309c85e24146101245780630a25e2f81461014d5780630dbffbcd1461017a57806321878c4b146101b2578063271fbd09146101c7575b600080fd5b34801561013057600080fd5b5061013a60035481565b6040519081526020015b60405180910390f35b34801561015957600080fd5b5061013a610168366004611a0f565b60076020526000908152604090205481565b34801561018657600080fd5b5060005461019a906001600160a01b031681565b6040516001600160a01b039091168152602001610144565b6101c56101c0366004611bcf565b610415565b005b6101c56101d5366004611d06565b6106c8565b3480156101e657600080fd5b506101c56101f5366004611d74565b610998565b34801561020657600080fd5b5060015461019a906001600160a01b031681565b34801561022657600080fd5b5061022f6109f1565b604051610144929190611dee565b34801561024957600080fd5b5061025d610258366004611a0f565b610bda565b604051610144929190611e89565b34801561027757600080fd5b5061013a610d58565b34801561028c57600080fd5b506101c5610de5565b3480156102a157600080fd5b504761013a565b3480156102b457600080fd5b5061019a6102c3366004611eb7565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b3480156102f557600080fd5b506101c5610304366004611ef4565b6110f9565b34801561031557600080fd5b5061013a610324366004611eb7565b805160208183018101805160088252928201919093012091525481565b34801561034d57600080fd5b5061013a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561038157600080fd5b5061019a610390366004611f72565b611328565b3480156103a157600080fd5b506103b56103b0366004611a0f565b611352565b6040516101449796959493929190611f8b565b3480156103d457600080fd5b506103e86103e3366004611a0f565b61152f565b6040516101449190611ff4565b34801561040157600080fd5b506101c5610410366004611d74565b611708565b336000908152600460205260409020600301546001600160a01b0316156104795760405162461bcd60e51b81526020600482015260136024820152725573657220616c72656164792065786973747360681b60448201526064015b60405180910390fd5b600061049c8260000151836020015184604001518560600151866080015161179e565b9050806104bb5760405162461bcd60e51b8152600401610470906120ae565b60006104e68361014001518460a001518560e001518661010001518760c00151886101200151611822565b905081806104f15750805b61053d5760405162461bcd60e51b815260206004820152601860248201527f50726f6f662073656e74206973206e6f742076616c69642e00000000000000006044820152606401610470565b6040805160e0810182528781526020808201889052818301879052336060830181905260006080840181905260a08401819052606460c0850152908152600490915291909120815181906105919082612182565b50602082015160018201906105a69082612182565b50604082015160028201906105bb9082612182565b5060608201516003820180546001600160a01b039092166001600160a01b03199283161790556080830151600483015560a083015160058084019190915560c090930151600690920191909155600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805490911633908117909155604051909190610657908890612242565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915533907fa2e1d286e25c6fce64acccdfd7a54d53cce2f617ddff648ab1dbb3458ccdd95b906106b89089908990611e89565b60405180910390a2505050505050565b6001600160a01b03878116600090815260046020526040902060030154166107025760405162461bcd60e51b81526004016104709061225e565b6001600160a01b038716600090815260066020526040902080548790811061072c5761072c61228b565b906000526020600020906005020160030160149054906101000a900460ff161561078c5760405162461bcd60e51b8152602060048201526011602482015270119a5b9948185b1c9958591e481c185a59607a1b6044820152606401610470565b600080546001600160a01b03166350de0e578787873388886040518763ffffffff1660e01b81526004016107c5969594939291906122a1565b602060405180830381865afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610806919061231d565b9050806108255760405162461bcd60e51b8152600401610470906120ae565b6001600160a01b038816600090815260066020526040812080548990811061084f5761084f61228b565b90600052602060002090600502019050806004015434146108c35760405162461bcd60e51b815260206004820152602860248201527f5061796d656e74206d75737420626520657175616c20746f207468652066696e6044820152671948185b5bdd5b9d60c21b6064820152608401610470565b60038101805460ff60a01b1916600160a01b1790556001600160a01b03891660009081526004602081905260408220018054916108ff83612355565b90915550506001600160a01b0389166000908152600760205260408120805434929061092c90849061236c565b925050819055503460036000828254610945919061236c565b9091555050604080518981523460208201526001600160a01b038b16917f7cf7727a6ea8ffa8b0fa4c048af68e653cbe5008f79a2ab7518ef64d667f9095910160405180910390a2505050505050505050565b6001600160a01b03828116600090815260046020526040902060030154166109d25760405162461bcd60e51b81526004016104709061225e565b6001600160a01b03909116600090815260046020526040902060060155565b60025460609081908067ffffffffffffffff811115610a1257610a12611a31565b604051908082528060200260200182016040528015610a4557816020015b6060815260200190600190039081610a305790505b5092508067ffffffffffffffff811115610a6157610a61611a31565b604051908082528060200260200182016040528015610a8a578160200160208202803683370190505b50915060005b81811015610bd457600060028281548110610aad57610aad61228b565b60009182526020808320909101546001600160a01b031680835260049091526040909120805491925090610ae0906120f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0c906120f9565b8015610b595780601f10610b2e57610100808354040283529160200191610b59565b820191906000526020600020905b815481529060010190602001808311610b3c57829003601f168201915b5050505050858381518110610b7057610b7061228b565b602002602001018190525060046000826001600160a01b03166001600160a01b0316815260200190815260200160002060060154848381518110610bb657610bb661228b565b60209081029190910101525080610bcc81612385565b915050610a90565b50509091565b6001600160a01b03818116600090815260046020526040902060030154606091829116610c195760405162461bcd60e51b81526004016104709061225e565b6001600160a01b0383166000908152600460205260409020805460018201908290610c43906120f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6f906120f9565b8015610cbc5780601f10610c9157610100808354040283529160200191610cbc565b820191906000526020600020905b815481529060010190602001808311610c9f57829003601f168201915b50505050509150808054610ccf906120f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb906120f9565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b5050505050905091509150915091565b336000908152600460205260408120600181018054839190610d79906120f9565b905011610ddc5760405162461bcd60e51b815260206004820152602b60248201527f55736572206e6f7420726567697374657265642e20506c65617365207265676960448201526a39ba32b9103334b939ba1760a91b6064820152608401610470565b60050154919050565b3360009081526004602052604090206006810154610e3c5760405162461bcd60e51b8152602060048201526014602482015273139bc81c1bda5b9d1cc81d1bc818dbdb9d995c9d60621b6044820152606401610470565b600060035411610e855760405162461bcd60e51b815260206004820152601460248201527352657761726420706f6f6c20697320656d70747960601b6044820152606401610470565b6040805160018082528183019092526000918291906020808301908036833701905050905060005b8151811015610f175760046000838381518110610ecc57610ecc61228b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206006015483610f03919061236c565b925080610f0f81612385565b915050610ead565b5060008211610f685760405162461bcd60e51b815260206004820152601760248201527f4e6f20706f696e747320696e207468652073797374656d0000000000000000006044820152606401610470565b6000826003548560060154610f7d919061239e565b610f8791906123b5565b905080471015610fed5760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f7567682066756e647320696e20636f6e747261637420746f2060448201526a706179207265776172647360a81b6064820152608401610470565b604051600090339083908381818185875af1925050503d806000811461102f576040519150601f19603f3d011682016040523d82523d6000602084013e611034565b606091505b505090508061107e5760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b6044820152606401610470565b81856005016000828254611092919061236c565b9091555050600060068601819055600380548492906110b29084906123d7565b9091555050600585015460405190815233907f401ccfec4c6c7ac3f3b71182750d0f8d73c0d29cc476732b0b21ab0d359da47f906020015b60405180910390a25050505050565b6001600160a01b03848116600090815260046020526040902060030154166111335760405162461bcd60e51b81526004016104709061225e565b60006008846040516111459190612242565b9081526020016040518091039020541161119a5760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642076696f6c6174696f6e207479706560501b6044820152606401610470565b428211156111de5760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642074696d657374616d7607c1b6044820152606401610470565b60006008846040516111f09190612242565b908152604080519182900360209081018320546001600160a01b03891660009081526006835283812060c0860185528886528584018a81529486018890523360608701526080860182905260a08601839052805460018181018355918352939091208551600590940201928355925190945090918201906112719082612182565b50604082015160028201906112869082612182565b50606082015160038201805460808501511515600160a01b026001600160a81b03199091166001600160a01b039384161717905560a09092015160049182015590861660009081526020829052604081209091018054916112e683612385565b9190505550846001600160a01b03167faa376010f293fc2cf9fd32a4f6f25fcc273f37844a3b33f76cab5211070da1808533846040516110ea939291906123ea565b6002818154811061133857600080fd5b6000918252602090912001546001600160a01b0316905081565b60046020526000908152604090208054819061136d906120f9565b80601f0160208091040260200160405190810160405280929190818152602001828054611399906120f9565b80156113e65780601f106113bb576101008083540402835291602001916113e6565b820191906000526020600020905b8154815290600101906020018083116113c957829003601f168201915b5050505050908060010180546113fb906120f9565b80601f0160208091040260200160405190810160405280929190818152602001828054611427906120f9565b80156114745780601f1061144957610100808354040283529160200191611474565b820191906000526020600020905b81548152906001019060200180831161145757829003601f168201915b505050505090806002018054611489906120f9565b80601f01602080910402602001604051908101604052809291908181526020018280546114b5906120f9565b80156115025780601f106114d757610100808354040283529160200191611502565b820191906000526020600020905b8154815290600101906020018083116114e557829003601f168201915b5050505060038301546004840154600585015460069095015493946001600160a01b039092169390925087565b6001600160a01b0381166000908152600660209081526040808320805482518185028101850190935280835260609492939192909184015b828210156116fd57838290600052602060002090600502016040518060c0016040529081600082015481526020016001820180546115a4906120f9565b80601f01602080910402602001604051908101604052809291908181526020018280546115d0906120f9565b801561161d5780601f106115f25761010080835404028352916020019161161d565b820191906000526020600020905b81548152906001019060200180831161160057829003601f168201915b50505050508152602001600282018054611636906120f9565b80601f0160208091040260200160405190810160405280929190818152602001828054611662906120f9565b80156116af5780601f10611684576101008083540402835291602001916116af565b820191906000526020600020905b81548152906001019060200180831161169257829003601f168201915b505050918352505060038201546001600160a01b038116602080840191909152600160a01b90910460ff16151560408301526004909201546060909101529082526001929092019101611567565b505050509050919050565b6001600160a01b03828116600090815260046020526040902060030154166117425760405162461bcd60e51b81526004016104709061225e565b6001600160a01b03821660008181526004602052604090819020600501839055517f401ccfec4c6c7ac3f3b71182750d0f8d73c0d29cc476732b0b21ab0d359da47f906117929084815260200190565b60405180910390a25050565b600080546001600160a01b03166350de0e578787873388886040518763ffffffff1660e01b81526004016117d7969594939291906122a1565b602060405180830381865afa1580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611818919061231d565b9695505050505050565b60008061182e836119bc565b60018054604080518082019091528b5181529293506001600160a01b03169163f398789b9160208201908c9060200201519052604080516080810182528c820151918101918252908190606082018e60036020020151815250815260200160405180604001604052808e6004600881106118aa576118aa61228b565b602002015181526020018e6005600881106118c7576118c761228b565b60200201519052905260408051808201909152808d6006602002015181526020018d6007600881106118fb576118fb61228b565b60200201518152506040518060c001604052807f000000000000000000000000000000000000000000000000000000000000000081526020018d81526020018c81526020018b81526020018a8152602001878152506040518563ffffffff1660e01b815260040161196f9493929190612441565b602060405180830381865afa15801561198c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b0919061231d565b98975050505050505050565b60006003826040516020016119d391815260200190565b60408051601f198184030181529190528051602090910120901c92915050565b80356001600160a01b0381168114611a0a57600080fd5b919050565b600060208284031215611a2157600080fd5b611a2a826119f3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611a6b57611a6b611a31565b60405290565b600082601f830112611a8257600080fd5b813567ffffffffffffffff80821115611a9d57611a9d611a31565b604051601f8301601f19908116603f01168101908282118183101715611ac557611ac5611a31565b81604052838152866020858801011115611ade57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600082601f830112611b0f57600080fd5b6040516080810181811067ffffffffffffffff82111715611b3257611b32611a31565b604052806080840185811115611b4757600080fd5b845b81811015611b61578035835260209283019201611b49565b509195945050505050565b600082601f830112611b7d57600080fd5b60405161010080820182811067ffffffffffffffff82111715611ba257611ba2611a31565b60405283018185821115611bb557600080fd5b845b82811015611b61578035825260209182019101611bb7565b6000806000808486036103e0811215611be757600080fd5b853567ffffffffffffffff80821115611bff57600080fd5b611c0b89838a01611a71565b96506020880135915080821115611c2157600080fd5b611c2d89838a01611a71565b95506040880135915080821115611c4357600080fd5b50611c5088828901611a71565b935050610380605f1982011215611c6657600080fd5b50611c6f611a47565b606086013581526080860135602082015260a08601356040820152611c978760c08801611afe565b6060820152610140611cab88828901611b6c565b608083015261024087013560a083015261026087013560c083015261028087013560e08301526102a08701356101008301526102c0870135610120830152611cf7886102e08901611b6c565b90820152939692955090935050565b6000806000806000806000610220888a031215611d2257600080fd5b611d2b886119f3565b965060208801359550604088013594506060880135935060808801359250611d568960a08a01611afe565b9150611d66896101208a01611b6c565b905092959891949750929550565b60008060408385031215611d8757600080fd5b611d90836119f3565b946020939093013593505050565b60005b83811015611db9578181015183820152602001611da1565b50506000910152565b60008151808452611dda816020860160208601611d9e565b601f01601f19169290920160200192915050565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015611e4557605f19888703018552611e33868351611dc2565b95509382019390820190600101611e17565b50508584038187015286518085528782019482019350915060005b82811015611e7c57845184529381019392810192600101611e60565b5091979650505050505050565b604081526000611e9c6040830185611dc2565b8281036020840152611eae8185611dc2565b95945050505050565b600060208284031215611ec957600080fd5b813567ffffffffffffffff811115611ee057600080fd5b611eec84828501611a71565b949350505050565b60008060008060808587031215611f0a57600080fd5b611f13856119f3565b9350602085013567ffffffffffffffff80821115611f3057600080fd5b611f3c88838901611a71565b9450604087013593506060870135915080821115611f5957600080fd5b50611f6687828801611a71565b91505092959194509250565b600060208284031215611f8457600080fd5b5035919050565b60e081526000611f9e60e083018a611dc2565b8281036020840152611fb0818a611dc2565b90508281036040840152611fc48189611dc2565b6001600160a01b039790971660608401525050608081019390935260a083019190915260c0909101529392505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156120a057603f19898403018552815160c08151855288820151818a87015261204982870182611dc2565b91505087820151858203898701526120618282611dc2565b6060848101516001600160a01b03169088015260808085015115159088015260a09384015193909601929092525050938601939086019060010161201b565b509098975050505050505050565b6020808252602b908201527f5b416e6f6e41616468616172566f74655d3a2070726f6f662073656e7420697360408201526a103737ba103b30b634b21760a91b606082015260800190565b600181811c9082168061210d57607f821691505b60208210810361212d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561217d57600081815260208120601f850160051c8101602086101561215a5750805b601f850160051c820191505b8181101561217957828155600101612166565b5050505b505050565b815167ffffffffffffffff81111561219c5761219c611a31565b6121b0816121aa84546120f9565b84612133565b602080601f8311600181146121e557600084156121cd5750858301515b600019600386901b1c1916600185901b178555612179565b600085815260208120601f198616915b82811015612214578886015182559484019460019091019084016121f5565b50858210156122325787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251612254818460208701611d9e565b9190910192915050565b602080825260139082015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006102008201905087825260208781840152866040840152856060840152608083018560005b60048110156122e5578151835291830191908301906001016122c8565b50505061010083018460005b600881101561230e578151835291830191908301906001016122f1565b50505050979650505050505050565b60006020828403121561232f57600080fd5b81518015158114611a2a57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816123645761236461233f565b506000190190565b8082018082111561237f5761237f61233f565b92915050565b6000600182016123975761239761233f565b5060010190565b808202811582820484141761237f5761237f61233f565b6000826123d257634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561237f5761237f61233f565b6060815260006123fd6060830186611dc2565b6001600160a01b039490941660208301525060400152919050565b8060005b600281101561243b57815184526020938401939091019060010161241c565b50505050565b6101c081016124508287612418565b60408083018660005b60028110156124805761246d838351612418565b9183019160209190910190600101612459565b5050505061249160c0830185612418565b61010082018360005b60068110156124b957815183526020928301929091019060010161249a565b5050509594505050505056fea2646970667358221220788abafc5b980083b2900bbf1a5189c8c85954a417960a3e91614ef68df7196564736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 45,
        "contract": "contracts/Backend.sol:Backend",
        "label": "anonAadhaarVerifierAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 47,
        "contract": "contracts/Backend.sol:Backend",
        "label": "verifier",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 52,
        "contract": "contracts/Backend.sol:Backend",
        "label": "allUsers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 111,
        "contract": "contracts/Backend.sol:Backend",
        "label": "totalRewardPool",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 116,
        "contract": "contracts/Backend.sol:Backend",
        "label": "users",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(User)67_storage)"
      },
      {
        "astId": 120,
        "contract": "contracts/Backend.sol:Backend",
        "label": "vehicleToUser",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 126,
        "contract": "contracts/Backend.sol:Backend",
        "label": "userViolations",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Violation)80_storage)dyn_storage)"
      },
      {
        "astId": 130,
        "contract": "contracts/Backend.sol:Backend",
        "label": "finesPaid",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/Backend.sol:Backend",
        "label": "violationFines",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Violation)80_storage)dyn_storage": {
        "base": "t_struct(Violation)80_storage",
        "encoding": "dynamic_array",
        "label": "struct Backend.Violation[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Violation)80_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.Violation[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Violation)80_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(User)67_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)67_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(User)67_storage": {
        "encoding": "inplace",
        "label": "struct Backend.User",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/Backend.sol:Backend",
            "label": "basename",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 56,
            "contract": "contracts/Backend.sol:Backend",
            "label": "vehicleRegistrationNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 58,
            "contract": "contracts/Backend.sol:Backend",
            "label": "vehicleType",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 60,
            "contract": "contracts/Backend.sol:Backend",
            "label": "walletAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 62,
            "contract": "contracts/Backend.sol:Backend",
            "label": "pendingFines",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 64,
            "contract": "contracts/Backend.sol:Backend",
            "label": "rewardBalance",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 66,
            "contract": "contracts/Backend.sol:Backend",
            "label": "points",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Violation)80_storage": {
        "encoding": "inplace",
        "label": "struct Backend.Violation",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/Backend.sol:Backend",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 71,
            "contract": "contracts/Backend.sol:Backend",
            "label": "violationType",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 73,
            "contract": "contracts/Backend.sol:Backend",
            "label": "area",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 75,
            "contract": "contracts/Backend.sol:Backend",
            "label": "reportedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 77,
            "contract": "contracts/Backend.sol:Backend",
            "label": "isPaid",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 79,
            "contract": "contracts/Backend.sol:Backend",
            "label": "fineAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}