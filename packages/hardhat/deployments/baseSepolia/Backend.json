{
  "address": "0xfb2a3024A4ec0064B6be3884cb9529F9047a595C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pubkeyHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "violationIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FinePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardBalance",
          "type": "uint256"
        }
      ],
      "name": "RewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        }
      ],
      "name": "UserCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "violationType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "reportedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fineAmount",
          "type": "uint256"
        }
      ],
      "name": "ViolationReported",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addDailyPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_basename",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_points",
          "type": "uint256"
        }
      ],
      "name": "addPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newReward",
          "type": "uint256"
        }
      ],
      "name": "addUserReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anonAadhaarVerifierAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convertPointsToRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_vehicleType",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nullifierSeed1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifier1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "revealArray",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "groth16Proof1",
              "type": "uint256[8]"
            }
          ],
          "internalType": "struct Backend.CreateUserParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createUser",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "finesPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsersAndPoints",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "basenames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "points",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsersAndViolations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "basename",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "time",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "violationType",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "area",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "reportedBy",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isPaid",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "fineAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Backend.Violation[]",
              "name": "violations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Backend.UserViolationInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "getUserDetailsByAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_basename",
          "type": "string"
        }
      ],
      "name": "getUserDetailsByBasename",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserViolations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "violationType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "area",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "reportedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fineAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Backend.Violation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_violationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "revealArray",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[8]",
          "name": "groth16Proof",
          "type": "uint256[8]"
        }
      ],
      "name": "payFine",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_violationType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_area",
          "type": "string"
        }
      ],
      "name": "reportViolation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storedPublicKeyHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "basename",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleRegistrationNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vehicleType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pendingFines",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "vehicleToUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "violationFines",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x97595c8d2a242885a3a70ae449d5b5c68ff39ecd6309cb9db0f6e19433580921",
  "receipt": {
    "to": null,
    "from": "0x40ead570f73f472a95D57Bd95d3792E837C9b51E",
    "contractAddress": "0xfb2a3024A4ec0064B6be3884cb9529F9047a595C",
    "transactionIndex": 9,
    "gasUsed": "2728575",
    "logsBloom": "0x
    "blockHash": "0x55d5f03c962645b6a226ae43dd657ce165ed549f0d2b2fad3f46743b0202a526",
    "transactionHash": "0x97595c8d2a242885a3a70ae449d5b5c68ff39ecd6309cb9db0f6e19433580921",
    "logs": [],
    "blockNumber": 18926352,
    "cumulativeGasUsed": "3153040",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4C4d6c21F1D8e4591a69f7662b6EcE0f2f0E61b",
    "0x6E1c757A9E94f5D78c053A0d5Dd6854619095B88",
    "7159552241047614681013946344274430157054820687880791674287250194862110506098"
  ],
  "numDeployments": 16,
  "solcInputHash": "29dae3e7fc98229f27ff965bfc734da3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pubkeyHash\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"violationIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FinePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardBalance\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"name\":\"ViolationReported\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addDailyPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_basename\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"addPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"addUserReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anonAadhaarVerifierAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertPointsToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vehicleRegistrationNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vehicleType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nullifierSeed1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof1\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct Backend.CreateUserParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"finesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersAndPoints\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"basenames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"points\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersAndViolations\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Backend.Violation[]\",\"name\":\"violations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Backend.UserViolationInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getUserDetailsByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_basename\",\"type\":\"string\"}],\"name\":\"getUserDetailsByBasename\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserViolations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"violationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"area\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"reportedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Backend.Violation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_violationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof\",\"type\":\"uint256[8]\"}],\"name\":\"payFine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_violationType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_area\",\"type\":\"string\"}],\"name\":\"reportViolation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedPublicKeyHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"basename\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleRegistrationNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vehicleType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pendingFines\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"vehicleToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"violationFines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Backend.sol\":\"Backend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaar {\\n    function verifyAnonAadhaarProof(\\n        uint nullifierSeed,\\n        uint nullifier,\\n        uint timestamp,\\n        uint signal,\\n        uint[4] memory revealArray,\\n        uint[8] memory groth16Proof\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3d0247e04707d2266471efeef4ab38ecf879cc286217ad5f624d966608e8964d\",\"license\":\"GPL-3.0\"},\"@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaarVote {\\n\\n    struct Proposal {\\n        string description;\\n        uint256 voteCount;\\n    }\\n\\n    event Voted(address indexed _from, uint256 indexed _propositionIndex);\\n}\",\"keccak256\":\"0xd67f99d608c3765f289f7561231f806ab439964dca134728973be60dee700eb0\",\"license\":\"GPL-3.0\"},\"contracts/Backend.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol\\\";\\nimport \\\"@anon-aadhaar/contracts/interfaces/IAnonAadhaarVote.sol\\\";\\nimport \\\"../interfaces/IAnonDigiLockerGroth16Verifier.sol\\\";\\nimport \\\"../interfaces/IAnonDigiLocker.sol\\\";\\n\\ncontract Backend {\\n    address public anonAadhaarVerifierAddr;\\n    address public verifier;\\n    uint256 public immutable storedPublicKeyHash;\\n    address[] public allUsers; // Array to track all user addresses\\n    struct User {\\n        string basename;\\n        string vehicleRegistrationNumber;\\n        string vehicleType;\\n        address walletAddress; // keep only this one\\n        uint256 pendingFines;\\n        uint256 rewardBalance;\\n        uint256 points; // Added points field\\n    }\\n\\n    struct Violation {\\n        uint256 time;\\n        string violationType;\\n        string area; // Add area field\\n        address reportedBy;\\n        bool isPaid;\\n        uint256 fineAmount;\\n    }\\n\\n    struct CreateUserParams {\\n        uint256 nullifierSeed1;\\n        uint256 nullifier1;\\n        uint256 timestamp;\\n        uint256[4] revealArray;\\n        uint256[8] groth16Proof1;\\n        // uint256 nullifier2;\\n        // uint256 nullifierSeed2;\\n        // uint256 documentType;\\n        // uint256 reveal;\\n        // uint256 signal;\\n        // uint256[8] groth16Proof2;\\n    }\\n\\n    uint256 public totalRewardPool;\\n    uint256 public totalpoints;\\n    mapping(address => User) public users;\\n    mapping(string => address) public vehicleToUser;\\n    mapping(address => Violation[]) userViolations;\\n    mapping(address => uint256) public finesPaid;\\n    mapping(string => uint256) public violationFines;\\n\\n    event UserCreated(address indexed userAddress, string name, string vehicleRegistrationNumber);\\n    event RewardUpdated(address indexed user, uint256 newRewardBalance);\\n    event ViolationReported(address indexed user, string violationType, address reportedBy, uint256 fineAmount);\\n    event FinePaid(address indexed user, uint256 violationIndex, uint256 amount);\\n\\n    constructor(address _verifierAddr, address _verifier, uint256 _pubkeyHash) {\\n        verifier = _verifier;\\n        // Initialize some dummy fine amounts for violation types\\n        anonAadhaarVerifierAddr = _verifierAddr;\\n        storedPublicKeyHash = _pubkeyHash;\\n        violationFines[\\\"Speeding\\\"] = 80;\\n        violationFines[\\\"Parking\\\"] = 40;\\n        violationFines[\\\"Red Light\\\"] = 60;\\n        violationFines[\\\"Wrong way\\\"] = 90;\\n        totalRewardPool = 0; // Initialize with 1000\\n        totalpoints = 0;\\n    }\\n\\n    // ---------------------- REWARDS SYSTEM FUNCTIONS ----------------------\\n\\n    // Function to add to the total reward pool\\n    function addUserReward(address _user, uint256 _newReward) public {\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\n\\n        users[_user].rewardBalance += _newReward;\\n        emit RewardUpdated(_user, _newReward);\\n    }\\n\\n    // Function to fetch a user's reward balance\\n    function getMyRewards() public view returns (uint256) {\\n        User storage user = users[msg.sender];\\n        return user.rewardBalance;\\n    }\\n\\n    function addressToUint256(address _addr) private pure returns (uint256) {\\n        return uint256(uint160(_addr));\\n    }\\n\\n    function _hash(uint256 message) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(message))) >> 3;\\n    }\\n\\n    function verifyAnonAadhaar(\\n        uint256 nullifierSeed,\\n        uint256 nullifier,\\n        uint256 timestamp,\\n        uint256[4] memory revealArray,\\n        uint256[8] memory groth16Proof\\n    ) internal returns (bool) {\\n        return\\n            IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\n                nullifierSeed,\\n                nullifier,\\n                timestamp,\\n                addressToUint256(msg.sender),\\n                revealArray,\\n                groth16Proof\\n            );\\n    }\\n\\n    function verifyDigiLocker(\\n        uint256[8] memory proof,\\n        uint256 nullifier,\\n        uint256 documentType,\\n        uint256 reveal,\\n        uint256 nullifierSeed,\\n        uint256 signal\\n    ) internal view returns (bool) {\\n        uint256 signalHash = _hash(signal);\\n        return\\n            IAnonDigiLockerGroth16Verifier(verifier).verifyProof(\\n                [proof[0], proof[1]],\\n                [[proof[2], proof[3]], [proof[4], proof[5]]],\\n                [proof[6], proof[7]],\\n                [storedPublicKeyHash, nullifier, documentType, reveal, nullifierSeed, signalHash]\\n            );\\n    }\\n\\n    // Create a new user\\n    function createUser(\\n        string memory _basename,\\n        string memory _vehicleRegistrationNumber,\\n        string memory _vehicleType,\\n        CreateUserParams memory params // removed _userAddress parameter\\n    ) public payable {\\n        require(users[msg.sender].walletAddress == address(0), \\\"User already exists\\\");\\n\\n        bool isValid = verifyAnonAadhaar(\\n            params.nullifierSeed1,\\n            params.nullifier1,\\n            params.timestamp,\\n            params.revealArray,\\n            params.groth16Proof1\\n        );\\n        require(isValid, \\\"[AnonAadhaarVote]: proof sent is not valid.\\\");\\n\\n        // bool isValid2 = verifyDigiLocker(\\n        //     params.groth16Proof2,\\n        //     params.nullifier2,\\n        //     params.documentType,\\n        //     params.reveal,\\n        //     params.nullifierSeed2,\\n        //     params.signal\\n        // );\\n        // require(isValid || isValid2, 'Proof sent is not valid.');\\n        // require(isValid2, '[AnonAadhaarVote]: DL Proof sent is not valid.');\\n\\n        users[msg.sender] = User({\\n            basename: _basename,\\n            vehicleRegistrationNumber: _vehicleRegistrationNumber,\\n            vehicleType: _vehicleType,\\n            walletAddress: msg.sender,\\n            pendingFines: 0,\\n            rewardBalance: 0,\\n            points: 100 // Start with 100 points\\n        });\\n        allUsers.push(msg.sender); // Add this line after creating new user\\n        vehicleToUser[_vehicleRegistrationNumber] = msg.sender;\\n        totalpoints += 100;\\n        emit UserCreated(msg.sender, _basename, _vehicleRegistrationNumber);\\n    }\\n\\n    // Report a violation\\n    function reportViolation(\\n        address _user,\\n        string memory _violationType,\\n        uint256 _timestamp,\\n        string memory _area\\n    ) public {\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\n        require(violationFines[_violationType] > 0, \\\"Invalid violation type\\\");\\n        require(_timestamp <= block.timestamp, \\\"Invalid timestamp\\\");\\n\\n        uint256 fineAmount = violationFines[_violationType];\\n        userViolations[_user].push(\\n            Violation({\\n                time: _timestamp,\\n                violationType: _violationType,\\n                area: _area,\\n                reportedBy: msg.sender,\\n                isPaid: false,\\n                fineAmount: fineAmount\\n            })\\n        );\\n        users[_user].pendingFines++;\\n        emit ViolationReported(_user, _violationType, msg.sender, fineAmount);\\n    }\\n\\n    // Fetch all violations of a user\\n    function getUserViolations(address _user) public view returns (Violation[] memory) {\\n        return userViolations[_user];\\n    }\\n\\n    // Pay a fine\\n    function payFine(\\n        address _user,\\n        uint256 _violationIndex,\\n        uint256 nullifierSeed,\\n        uint256 nullifier,\\n        uint256 timestamp,\\n        uint256[4] memory revealArray,\\n        uint256[8] memory groth16Proof\\n    ) public payable {\\n        require(users[_user].walletAddress != address(0), \\\"User does not exist\\\");\\n        require(!userViolations[_user][_violationIndex].isPaid, \\\"Fine already paid\\\");\\n        bool isValid = IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\n            nullifierSeed,\\n            nullifier,\\n            timestamp,\\n            addressToUint256(msg.sender),\\n            revealArray,\\n            groth16Proof\\n        );\\n        require(isValid, \\\"[AnonAadhaarVote]: proof sent is not valid.\\\");\\n\\n        Violation storage violation = userViolations[_user][_violationIndex];\\n        require(msg.value == violation.fineAmount, \\\"Payment must be equal to the fine amount\\\");\\n\\n        violation.isPaid = true;\\n        users[_user].pendingFines--;\\n        finesPaid[_user] += msg.value;\\n        totalRewardPool += msg.value; // Add fine amount to total reward pool\\n        emit FinePaid(_user, _violationIndex, msg.value);\\n    }\\n\\n    function addPoints(string memory _basename, uint256 _points) public {\\n        address userAddress;\\n        for (uint i = 0; i < allUsers.length; i++) {\\n            if (keccak256(bytes(users[allUsers[i]].basename)) == keccak256(bytes(_basename))) {\\n                userAddress = allUsers[i];\\n                break;\\n            }\\n        }\\n        require(userAddress != address(0), \\\"User not found\\\");\\n        \\n        users[userAddress].points += _points;\\n        totalpoints += _points;\\n    }\\n\\n    function convertPointsToRewards() public {\\n        User storage user = users[msg.sender];\\n        require(user.points > 0, \\\"No points to convert\\\");\\n        require(totalRewardPool > 0, \\\"Reward pool is empty\\\");\\n        require(totalpoints > 0, \\\"No points in the system\\\");\\n\\n        // Calculate user's share of the reward pool\\n        uint256 rewardShare = (user.points * totalRewardPool) / totalpoints;\\n\\n        // Ensure contract has enough Ether\\n        require(address(this).balance >= rewardShare, \\\"Not enough funds in contract to pay rewards\\\");\\n\\n        // Transfer reward to the user's wallet\\n        (bool success, ) = msg.sender.call{ value: rewardShare }(\\\"\\\");\\n        require(success, \\\"Reward transfer failed\\\");\\n\\n        // Update user's internal balances\\n        user.rewardBalance += rewardShare; // For internal tracking\\n        totalpoints-=user.points;\\n        user.points = 0; // Reset points after conversion\\n        totalRewardPool -= rewardShare;\\n\\n        emit RewardUpdated(msg.sender, user.rewardBalance);\\n    }\\n\\n    function getContractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getUserDetailsByAddress(\\n        address _walletAddress\\n    ) public view returns (\\n        string memory basename,\\n        string memory vehicleNumber,\\n        string memory vehicleType,\\n        uint256 pendingFines,\\n        uint256 rewardBalance,\\n        uint256 points\\n    ) {\\n        require(users[_walletAddress].walletAddress != address(0), \\\"User does not exist\\\");\\n        User memory user = users[_walletAddress];\\n        return (\\n            user.basename,\\n            user.vehicleRegistrationNumber,\\n            user.vehicleType,\\n            user.pendingFines,\\n            user.rewardBalance,\\n            user.points\\n        );\\n    }\\n\\n    function getUserDetailsByBasename(\\n        string memory _basename\\n    ) public view returns (\\n        string memory basename,\\n        string memory vehicleNumber,\\n        string memory vehicleType,\\n        address walletAddress,\\n        uint256 pendingFines,\\n        uint256 rewardBalance,\\n        uint256 points\\n    ) {\\n        address userAddress;\\n        for (uint i = 0; i < allUsers.length; i++) {\\n            if (keccak256(bytes(users[allUsers[i]].basename)) == keccak256(bytes(_basename))) {\\n                userAddress = allUsers[i];\\n                break;\\n            }\\n        }\\n        require(userAddress != address(0), \\\"User not found\\\");\\n        \\n        User memory user = users[userAddress];\\n        return (\\n            user.basename,\\n            user.vehicleRegistrationNumber,\\n            user.vehicleType,\\n            user.walletAddress,\\n            user.pendingFines,\\n            user.rewardBalance,\\n            user.points\\n        );\\n    }\\n\\n    function getAllUsersAndPoints()\\n        public\\n        view\\n        returns (\\n            string[] memory basenames, // changed from usernames to basenames\\n            uint256[] memory points\\n        )\\n    {\\n        uint256 totalUsers = allUsers.length;\\n        basenames = new string[](totalUsers); // changed variable name\\n        points = new uint256[](totalUsers);\\n\\n        for (uint256 i = 0; i < totalUsers; i++) {\\n            address userAddress = allUsers[i];\\n            basenames[i] = users[userAddress].basename; // changed variable name\\n            points[i] = users[userAddress].points;\\n        }\\n\\n        return (basenames, points); // changed return variable name\\n    }\\n\\n    function getUserPoints(address _userAddress) public view returns (uint256) {\\n        require(users[_userAddress].walletAddress != address(0), \\\"User does not exist\\\");\\n        return users[_userAddress].points;\\n    }\\n\\n    struct UserViolationInfo {\\n        address userAddress;\\n        string basename;\\n        Violation[] violations;\\n    }\\n\\n    function getAllUsersAndViolations() public view returns (UserViolationInfo[] memory) {\\n        uint256 totalUsers = allUsers.length;\\n        UserViolationInfo[] memory allUserInfo = new UserViolationInfo[](totalUsers);\\n\\n        for (uint256 i = 0; i < totalUsers; i++) {\\n            address userAddr = allUsers[i];\\n            allUserInfo[i] = UserViolationInfo({\\n                userAddress: userAddr,\\n                basename: users[userAddr].basename,\\n                violations: userViolations[userAddr]\\n            });\\n        }\\n\\n        return allUserInfo;\\n    }\\n\\n    // Add this new function for daily points update\\n    function addDailyPoints() public {\\n        uint256 totalUsers = allUsers.length;\\n        for (uint256 i = 0; i < totalUsers; i++) {\\n            address userAddr = allUsers[i];\\n            if (users[userAddr].pendingFines == 0) {\\n                users[userAddr].points += 10;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeef3df5381cd4208e5312953bb37b43f3c28e2b21071738a85c6c88576ae3fe9\"},\"interfaces/IAnonDigiLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonDigiLocker {\\n    function verifyAnonDigiLockerProof(\\n        uint nullifierSeed,\\n        uint nullifier,\\n        uint documentType,\\n        uint reveal,\\n        uint signal,\\n        uint[8] memory groth16Proof\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0xf6161a05387c8f082e0c38277c4150f65bfd33058f9473f0e2f0a043164a421d\",\"license\":\"GPL-3.0\"},\"interfaces/IAnonDigiLockerGroth16Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonDigiLockerGroth16Verifier {\\n    function verifyProof(\\n        uint[2] calldata _pA,\\n        uint[2][2] calldata _pB,\\n        uint[2] calldata _pC,\\n        uint[6] calldata publicInputs\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0xfa160aa80a6db0b0968e135fc6dfc120028f2c28ccc9e4a148e51ce8027d13a3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002f6738038062002f67833981016040819052620000349162000148565b600180546001600160a01b038085166001600160a01b031992831617909255600080549286169290911691909117905560808190526040516050906009906200008b90675370656564696e6760c01b815260080190565b90815260405190819003602001812091909155665061726b696e6760c81b8152602890600990600701908152604051908190036020018120919091556814995908131a59da1d60ba1b8152603c906009908101908152604051908190036020018120919091556857726f6e672077617960b81b8152605a906009908101908152604051908190036020019020555050600060038190556004555062000189565b80516001600160a01b03811681146200014357600080fd5b919050565b6000806000606084860312156200015e57600080fd5b62000169846200012b565b925062000179602085016200012b565b9150604084015190509250925092565b608051612dc2620001a560003960006104130152612dc26000f3fe6080604052600436106101645760003560e01c806364eef57e116100d1578063a2bdedf41161008a578063ce39f21e11610064578063ce39f21e14610495578063d0b9cf24146104ab578063e0945601146104d8578063eca7e54d146104ed57600080fd5b8063a2bdedf414610435578063a87430ba14610455578063aeefe31f1461047557600080fd5b806364eef57e146103405780636f9fb98a1461035557806370c511391461036857806372ff6839146103a957806396ab4bab146103c95780639c895b0a1461040157600080fd5b8063271fbd0911610123578063271fbd09146102725780632b7ac3f3146102855780632f24225c146102a55780634e308550146102c85780635393edab146102e85780635cd798361461031a57600080fd5b80611bf114610169578063081bfd5e1461018b57806309c85e24146101b65780630a25e2f8146101da5780630dbffbcd14610207578063190d2e901461023f575b600080fd5b34801561017557600080fd5b5061018961018436600461223c565b610500565b005b34801561019757600080fd5b506101a0610649565b6040516101ad91906122d1565b60405180910390f35b3480156101c257600080fd5b506101cc60035481565b6040519081526020016101ad565b3480156101e657600080fd5b506101cc6101f536600461241e565b60086020526000908152604090205481565b34801561021357600080fd5b50600054610227906001600160a01b031681565b6040516001600160a01b0390911681526020016101ad565b34801561024b57600080fd5b5061025f61025a366004612440565b6109bb565b6040516101ad979695949392919061247d565b6101896102803660046125b7565b610d1d565b34801561029157600080fd5b50600154610227906001600160a01b031681565b3480156102b157600080fd5b506102ba610fed565b6040516101ad929190612625565b3480156102d457600080fd5b506101896102e33660046126c0565b6111d6565b3480156102f457600080fd5b5061030861030336600461241e565b611282565b6040516101ad969594939291906126ea565b34801561032657600080fd5b5033600090815260056020819052604090912001546101cc565b34801561034c57600080fd5b5061018961150a565b34801561036157600080fd5b50476101cc565b34801561037457600080fd5b50610227610383366004612440565b80516020818301810180516006825292820191909301209152546001600160a01b031681565b3480156103b557600080fd5b506101896103c4366004612742565b6117a8565b3480156103d557600080fd5b506101cc6103e4366004612440565b805160208183018101805160098252928201919093012091525481565b34801561040d57600080fd5b506101cc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561044157600080fd5b506102276104503660046127c0565b6119e6565b34801561046157600080fd5b5061025f61047036600461241e565b611a10565b34801561048157600080fd5b506101cc61049036600461241e565b611bed565b3480156104a157600080fd5b506101cc60045481565b3480156104b757600080fd5b506104cb6104c636600461241e565b611c48565b6040516101ad91906127d9565b3480156104e457600080fd5b50610189611e21565b6101896104fb366004612893565b611ebd565b6000805b6002548110156105ae578380519060200120600560006002848154811061052d5761052d61297e565b60009182526020808320909101546001600160a01b031683528201929092526040908101909120905161056091906129ce565b60405180910390200361059c57600281815481106105805761058061297e565b6000918252602090912001546001600160a01b031691506105ae565b806105a681612a5a565b915050610504565b506001600160a01b0381166105fb5760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b60448201526064015b60405180910390fd5b6001600160a01b03811660009081526005602052604081206006018054849290610626908490612a73565b92505081905550816004600082825461063f9190612a73565b9091555050505050565b60025460609060008167ffffffffffffffff81111561066a5761066a612170565b6040519080825280602002602001820160405280156106c857816020015b6106b5604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816106885790505b50905060005b828110156109b4576000600282815481106106eb576106eb61297e565b6000918252602080832090910154604080516060810182526001600160a01b03909216808352808552600584529320805493945090929183019161072e90612994565b80601f016020809104026020016040519081016040528092919081815260200182805461075a90612994565b80156107a75780601f1061077c576101008083540402835291602001916107a7565b820191906000526020600020905b81548152906001019060200180831161078a57829003601f168201915b50505091835250506001600160a01b03831660009081526007602090815260408083208054825181850281018501909352808352948301949193909284015b8282101561097c57838290600052602060002090600502016040518060c00160405290816000820154815260200160018201805461082390612994565b80601f016020809104026020016040519081016040528092919081815260200182805461084f90612994565b801561089c5780601f106108715761010080835404028352916020019161089c565b820191906000526020600020905b81548152906001019060200180831161087f57829003601f168201915b505050505081526020016002820180546108b590612994565b80601f01602080910402602001604051908101604052809291908181526020018280546108e190612994565b801561092e5780601f106109035761010080835404028352916020019161092e565b820191906000526020600020905b81548152906001019060200180831161091157829003601f168201915b505050918352505060038201546001600160a01b038116602080840191909152600160a01b90910460ff161515604083015260049092015460609091015290825260019290920191016107e6565b505050508152508383815181106109955761099561297e565b60200260200101819052505080806109ac90612a5a565b9150506106ce565b5092915050565b60608080600080808080805b600254811015610a7157898051906020012060056000600284815481106109f0576109f061297e565b60009182526020808320909101546001600160a01b0316835282019290925260409081019091209051610a2391906129ce565b604051809103902003610a5f5760028181548110610a4357610a4361297e565b6000918252602090912001546001600160a01b03169150610a71565b80610a6981612a5a565b9150506109c7565b506001600160a01b038116610ab95760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b60448201526064016105f2565b6001600160a01b038116600090815260056020526040808220815160e08101909252805482908290610aea90612994565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1690612994565b8015610b635780601f10610b3857610100808354040283529160200191610b63565b820191906000526020600020905b815481529060010190602001808311610b4657829003601f168201915b50505050508152602001600182018054610b7c90612994565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba890612994565b8015610bf55780601f10610bca57610100808354040283529160200191610bf5565b820191906000526020600020905b815481529060010190602001808311610bd857829003601f168201915b50505050508152602001600282018054610c0e90612994565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3a90612994565b8015610c875780601f10610c5c57610100808354040283529160200191610c87565b820191906000526020600020905b815481529060010190602001808311610c6a57829003601f168201915b505050505081526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815250509050806000015181602001518260400151836060015184608001518560a001518660c0015198509850985098509850985098505050919395979092949650565b6001600160a01b0387811660009081526005602052604090206003015416610d575760405162461bcd60e51b81526004016105f290612a8c565b6001600160a01b0387166000908152600760205260409020805487908110610d8157610d8161297e565b906000526020600020906005020160030160149054906101000a900460ff1615610de15760405162461bcd60e51b8152602060048201526011602482015270119a5b9948185b1c9958591e481c185a59607a1b60448201526064016105f2565b600080546001600160a01b03166350de0e578787873388886040518763ffffffff1660e01b8152600401610e1a96959493929190612ab9565b602060405180830381865afa158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b9190612b35565b905080610e7a5760405162461bcd60e51b81526004016105f290612b57565b6001600160a01b0388166000908152600760205260408120805489908110610ea457610ea461297e565b9060005260206000209060050201905080600401543414610f185760405162461bcd60e51b815260206004820152602860248201527f5061796d656e74206d75737420626520657175616c20746f207468652066696e6044820152671948185b5bdd5b9d60c21b60648201526084016105f2565b60038101805460ff60a01b1916600160a01b1790556001600160a01b0389166000908152600560205260408120600401805491610f5483612ba2565b90915550506001600160a01b03891660009081526008602052604081208054349290610f81908490612a73565b925050819055503460036000828254610f9a9190612a73565b9091555050604080518981523460208201526001600160a01b038b16917f7cf7727a6ea8ffa8b0fa4c048af68e653cbe5008f79a2ab7518ef64d667f9095910160405180910390a2505050505050505050565b60025460609081908067ffffffffffffffff81111561100e5761100e612170565b60405190808252806020026020018201604052801561104157816020015b606081526020019060019003908161102c5790505b5092508067ffffffffffffffff81111561105d5761105d612170565b604051908082528060200260200182016040528015611086578160200160208202803683370190505b50915060005b818110156111d0576000600282815481106110a9576110a961297e565b60009182526020808320909101546001600160a01b0316808352600590915260409091208054919250906110dc90612994565b80601f016020809104026020016040519081016040528092919081815260200182805461110890612994565b80156111555780601f1061112a57610100808354040283529160200191611155565b820191906000526020600020905b81548152906001019060200180831161113857829003601f168201915b505050505085838151811061116c5761116c61297e565b602002602001018190525060056000826001600160a01b03166001600160a01b03168152602001908152602001600020600601548483815181106111b2576111b261297e565b602090810291909101015250806111c881612a5a565b91505061108c565b50509091565b6001600160a01b03828116600090815260056020526040902060030154166112105760405162461bcd60e51b81526004016105f290612a8c565b6001600160a01b0382166000908152600560208190526040822001805483929061123b908490612a73565b90915550506040518181526001600160a01b038316907f401ccfec4c6c7ac3f3b71182750d0f8d73c0d29cc476732b0b21ab0d359da47f9060200160405180910390a25050565b6001600160a01b0381811660009081526005602052604081206003015460609283928392909182918291166112c95760405162461bcd60e51b81526004016105f290612a8c565b6001600160a01b038716600090815260056020526040808220815160e081019092528054829082906112fa90612994565b80601f016020809104026020016040519081016040528092919081815260200182805461132690612994565b80156113735780601f1061134857610100808354040283529160200191611373565b820191906000526020600020905b81548152906001019060200180831161135657829003601f168201915b5050505050815260200160018201805461138c90612994565b80601f01602080910402602001604051908101604052809291908181526020018280546113b890612994565b80156114055780601f106113da57610100808354040283529160200191611405565b820191906000526020600020905b8154815290600101906020018083116113e857829003601f168201915b5050505050815260200160028201805461141e90612994565b80601f016020809104026020016040519081016040528092919081815260200182805461144a90612994565b80156114975780601f1061146c57610100808354040283529160200191611497565b820191906000526020600020905b81548152906001019060200180831161147a57829003601f168201915b505050918352505060038201546001600160a01b0316602080830191909152600483015460408084019190915260058401546060840152600690930154608092830152835190840151928401519184015160a085015160c090950151919d939c50919a5090985091965090945092505050565b33600090815260056020526040902060068101546115615760405162461bcd60e51b8152602060048201526014602482015273139bc81c1bda5b9d1cc81d1bc818dbdb9d995c9d60621b60448201526064016105f2565b6000600354116115aa5760405162461bcd60e51b815260206004820152601460248201527352657761726420706f6f6c20697320656d70747960601b60448201526064016105f2565b6000600454116115fc5760405162461bcd60e51b815260206004820152601760248201527f4e6f20706f696e747320696e207468652073797374656d00000000000000000060448201526064016105f2565b600060045460035483600601546116139190612bb9565b61161d9190612bd0565b9050804710156116835760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f7567682066756e647320696e20636f6e747261637420746f2060448201526a706179207265776172647360a81b60648201526084016105f2565b604051600090339083908381818185875af1925050503d80600081146116c5576040519150601f19603f3d011682016040523d82523d6000602084013e6116ca565b606091505b50509050806117145760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b60448201526064016105f2565b818360050160008282546117289190612a73565b9091555050600683015460048054600090611744908490612bf2565b909155505060006006840181905560038054849290611764908490612bf2565b9091555050600583015460405190815233907f401ccfec4c6c7ac3f3b71182750d0f8d73c0d29cc476732b0b21ab0d359da47f9060200160405180910390a2505050565b6001600160a01b03848116600090815260056020526040902060030154166117e25760405162461bcd60e51b81526004016105f290612a8c565b60006009846040516117f49190612c05565b908152602001604051809103902054116118495760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642076696f6c6174696f6e207479706560501b60448201526064016105f2565b4282111561188d5760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642074696d657374616d7607c1b60448201526064016105f2565b600060098460405161189f9190612c05565b908152604080519182900360209081018320546001600160a01b03891660009081526007835283812060c0860185528886528584018a81529486018890523360608701526080860182905260a08601839052805460018181018355918352939091208551600590940201928355925190945090918201906119209082612c70565b50604082015160028201906119359082612c70565b50606082015160038201805460808501511515600160a01b026001600160a81b03199091166001600160a01b039384161717905560a090920151600491820155908616600090815260056020526040812090910180549161199583612a5a565b9190505550846001600160a01b03167faa376010f293fc2cf9fd32a4f6f25fcc273f37844a3b33f76cab5211070da1808533846040516119d793929190612d30565b60405180910390a25050505050565b600281815481106119f657600080fd5b6000918252602090912001546001600160a01b0316905081565b600560205260009081526040902080548190611a2b90612994565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5790612994565b8015611aa45780601f10611a7957610100808354040283529160200191611aa4565b820191906000526020600020905b815481529060010190602001808311611a8757829003601f168201915b505050505090806001018054611ab990612994565b80601f0160208091040260200160405190810160405280929190818152602001828054611ae590612994565b8015611b325780601f10611b0757610100808354040283529160200191611b32565b820191906000526020600020905b815481529060010190602001808311611b1557829003601f168201915b505050505090806002018054611b4790612994565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7390612994565b8015611bc05780601f10611b9557610100808354040283529160200191611bc0565b820191906000526020600020905b815481529060010190602001808311611ba357829003601f168201915b5050505060038301546004840154600585015460069095015493946001600160a01b039092169390925087565b6001600160a01b03818116600090815260056020526040812060030154909116611c295760405162461bcd60e51b81526004016105f290612a8c565b506001600160a01b031660009081526005602052604090206006015490565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609492939192909184015b82821015611e1657838290600052602060002090600502016040518060c001604052908160008201548152602001600182018054611cbd90612994565b80601f0160208091040260200160405190810160405280929190818152602001828054611ce990612994565b8015611d365780601f10611d0b57610100808354040283529160200191611d36565b820191906000526020600020905b815481529060010190602001808311611d1957829003601f168201915b50505050508152602001600282018054611d4f90612994565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7b90612994565b8015611dc85780601f10611d9d57610100808354040283529160200191611dc8565b820191906000526020600020905b815481529060010190602001808311611dab57829003601f168201915b505050918352505060038201546001600160a01b038116602080840191909152600160a01b90910460ff16151560408301526004909201546060909101529082526001929092019101611c80565b505050509050919050565b60025460005b81811015611eb957600060028281548110611e4457611e4461297e565b60009182526020808320909101546001600160a01b0316808352600590915260408220600401549092509003611ea6576001600160a01b03811660009081526005602052604081206006018054600a9290611ea0908490612a73565b90915550505b5080611eb181612a5a565b915050611e27565b5050565b336000908152600560205260409020600301546001600160a01b031615611f1c5760405162461bcd60e51b81526020600482015260136024820152725573657220616c72656164792065786973747360681b60448201526064016105f2565b6000611f3f826000015183602001518460400151856060015186608001516120ec565b905080611f5e5760405162461bcd60e51b81526004016105f290612b57565b6040805160e0810182528681526020808201879052818301869052336060830181905260006080840181905260a08401819052606460c085015290815260059091529190912081518190611fb29082612c70565b5060208201516001820190611fc79082612c70565b5060408201516002820190611fdc9082612c70565b5060608201516003820180546001600160a01b039092166001600160a01b03199283161790556080830151600483015560a0830151600583015560c090920151600691820155600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180549092163390811790925560405161206e908790612c05565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506064600460008282546120b39190612a73565b909155505060405133907fa2e1d286e25c6fce64acccdfd7a54d53cce2f617ddff648ab1dbb3458ccdd95b906119d79088908890612d5e565b600080546001600160a01b03166350de0e578787873388886040518763ffffffff1660e01b815260040161212596959493929190612ab9565b602060405180830381865afa158015612142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121669190612b35565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156121a9576121a9612170565b60405290565b600082601f8301126121c057600080fd5b813567ffffffffffffffff808211156121db576121db612170565b604051601f8301601f19908116603f0116810190828211818310171561220357612203612170565b8160405283815286602085880101111561221c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561224f57600080fd5b823567ffffffffffffffff81111561226657600080fd5b612272858286016121af565b95602094909401359450505050565b60005b8381101561229c578181015183820152602001612284565b50506000910152565b600081518084526122bd816020860160208601612281565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156123f557878503603f19018452815180516001600160a01b039081168752878201516060898901819052612332908901826122a5565b90506040830151925087810360408901528083518083528a830191508a8160051b8401018b8601955060005b828110156123dd57601f198583030184528651805183528d81015160c08f85015261238c60c08501826122a5565b9050604082015184820360408601526123a582826122a5565b6060848101518b169087015260808085015115159087015260a09384015193909501929092525050958c0195928c019260010161235e565b509950505095880195505050908501906001016122f8565b5092979650505050505050565b80356001600160a01b038116811461241957600080fd5b919050565b60006020828403121561243057600080fd5b61243982612402565b9392505050565b60006020828403121561245257600080fd5b813567ffffffffffffffff81111561246957600080fd5b612475848285016121af565b949350505050565b60e08152600061249060e083018a6122a5565b82810360208401526124a2818a6122a5565b905082810360408401526124b681896122a5565b6001600160a01b039790971660608401525050608081019390935260a083019190915260c0909101529392505050565b600082601f8301126124f757600080fd5b6040516080810181811067ffffffffffffffff8211171561251a5761251a612170565b60405280608084018581111561252f57600080fd5b845b81811015612549578035835260209283019201612531565b509195945050505050565b600082601f83011261256557600080fd5b60405161010080820182811067ffffffffffffffff8211171561258a5761258a612170565b6040528301818582111561259d57600080fd5b845b8281101561254957803582526020918201910161259f565b6000806000806000806000610220888a0312156125d357600080fd5b6125dc88612402565b9650602088013595506040880135945060608801359350608088013592506126078960a08a016124e6565b9150612617896101208a01612554565b905092959891949750929550565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561267c57605f1988870301855261266a8683516122a5565b9550938201939082019060010161264e565b50508584038187015286518085528782019482019350915060005b828110156126b357845184529381019392810192600101612697565b5091979650505050505050565b600080604083850312156126d357600080fd5b6126dc83612402565b946020939093013593505050565b60c0815260006126fd60c08301896122a5565b828103602084015261270f81896122a5565b9050828103604084015261272381886122a5565b60608401969096525050608081019290925260a0909101529392505050565b6000806000806080858703121561275857600080fd5b61276185612402565b9350602085013567ffffffffffffffff8082111561277e57600080fd5b61278a888389016121af565b94506040870135935060608701359150808211156127a757600080fd5b506127b4878288016121af565b91505092959194509250565b6000602082840312156127d257600080fd5b5035919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561288557603f19898403018552815160c08151855288820151818a87015261282e828701826122a5565b915050878201518582038987015261284682826122a5565b6060848101516001600160a01b03169088015260808085015115159088015260a093840151939096019290925250509386019390860190600101612800565b509098975050505050505050565b6000806000808486036102408112156128ab57600080fd5b853567ffffffffffffffff808211156128c357600080fd5b6128cf89838a016121af565b965060208801359150808211156128e557600080fd5b6128f189838a016121af565b9550604088013591508082111561290757600080fd5b50612914888289016121af565b9350506101e0605f198201121561292a57600080fd5b50612933612186565b606086013581526080860135602082015260a0860135604082015261295b8760c088016124e6565b606082015261296e876101408801612554565b6080820152939692955090935050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806129a857607f821691505b6020821081036129c857634e487b7160e01b600052602260045260246000fd5b50919050565b60008083546129dc81612994565b600182811680156129f45760018114612a0957612a38565b60ff1984168752821515830287019450612a38565b8760005260208060002060005b85811015612a2f5781548a820152908401908201612a16565b50505082870194505b50929695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201612a6c57612a6c612a44565b5060010190565b80820180821115612a8657612a86612a44565b92915050565b602080825260139082015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60006102008201905087825260208781840152866040840152856060840152608083018560005b6004811015612afd57815183529183019190830190600101612ae0565b50505061010083018460005b6008811015612b2657815183529183019190830190600101612b09565b50505050979650505050505050565b600060208284031215612b4757600080fd5b8151801515811461243957600080fd5b6020808252602b908201527f5b416e6f6e41616468616172566f74655d3a2070726f6f662073656e7420697360408201526a103737ba103b30b634b21760a91b606082015260800190565b600081612bb157612bb1612a44565b506000190190565b8082028115828204841417612a8657612a86612a44565b600082612bed57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115612a8657612a86612a44565b60008251612c17818460208701612281565b9190910192915050565b601f821115612c6b57600081815260208120601f850160051c81016020861015612c485750805b601f850160051c820191505b81811015612c6757828155600101612c54565b5050505b505050565b815167ffffffffffffffff811115612c8a57612c8a612170565b612c9e81612c988454612994565b84612c21565b602080601f831160018114612cd35760008415612cbb5750858301515b600019600386901b1c1916600185901b178555612c67565b600085815260208120601f198616915b82811015612d0257888601518255948401946001909101908401612ce3565b5085821015612d205787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612d4360608301866122a5565b6001600160a01b039490941660208301525060400152919050565b604081526000612d7160408301856122a5565b8281036020840152612d8381856122a5565b9594505050505056fea264697066735822122007ec6e815821b59ead132f869fd4821c1ab8b685687714113e426c0f6d5807e964736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 45,
        "contract": "contracts/Backend.sol:Backend",
        "label": "anonAadhaarVerifierAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 47,
        "contract": "contracts/Backend.sol:Backend",
        "label": "verifier",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 52,
        "contract": "contracts/Backend.sol:Backend",
        "label": "allUsers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 97,
        "contract": "contracts/Backend.sol:Backend",
        "label": "totalRewardPool",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 99,
        "contract": "contracts/Backend.sol:Backend",
        "label": "totalpoints",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 104,
        "contract": "contracts/Backend.sol:Backend",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(User)67_storage)"
      },
      {
        "astId": 108,
        "contract": "contracts/Backend.sol:Backend",
        "label": "vehicleToUser",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 114,
        "contract": "contracts/Backend.sol:Backend",
        "label": "userViolations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Violation)80_storage)dyn_storage)"
      },
      {
        "astId": 118,
        "contract": "contracts/Backend.sol:Backend",
        "label": "finesPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 122,
        "contract": "contracts/Backend.sol:Backend",
        "label": "violationFines",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Violation)80_storage)dyn_storage": {
        "base": "t_struct(Violation)80_storage",
        "encoding": "dynamic_array",
        "label": "struct Backend.Violation[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Violation)80_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.Violation[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Violation)80_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(User)67_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Backend.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)67_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(User)67_storage": {
        "encoding": "inplace",
        "label": "struct Backend.User",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/Backend.sol:Backend",
            "label": "basename",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 56,
            "contract": "contracts/Backend.sol:Backend",
            "label": "vehicleRegistrationNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 58,
            "contract": "contracts/Backend.sol:Backend",
            "label": "vehicleType",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 60,
            "contract": "contracts/Backend.sol:Backend",
            "label": "walletAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 62,
            "contract": "contracts/Backend.sol:Backend",
            "label": "pendingFines",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 64,
            "contract": "contracts/Backend.sol:Backend",
            "label": "rewardBalance",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 66,
            "contract": "contracts/Backend.sol:Backend",
            "label": "points",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Violation)80_storage": {
        "encoding": "inplace",
        "label": "struct Backend.Violation",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/Backend.sol:Backend",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 71,
            "contract": "contracts/Backend.sol:Backend",
            "label": "violationType",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 73,
            "contract": "contracts/Backend.sol:Backend",
            "label": "area",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 75,
            "contract": "contracts/Backend.sol:Backend",
            "label": "reportedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 77,
            "contract": "contracts/Backend.sol:Backend",
            "label": "isPaid",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 79,
            "contract": "contracts/Backend.sol:Backend",
            "label": "fineAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}