{
  "language": "Solidity",
  "sources": {
    "contracts/YourContract.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract YourContract {\r\n    struct User {\r\n        string name;\r\n        string vehicleRegistrationNumber;\r\n        address walletAddress;\r\n        uint256 pendingFines;\r\n    }\r\n\r\n    struct Violation {\r\n        uint256 time;\r\n        string violationType;\r\n        address reportedBy;\r\n        bool isPaid;\r\n        uint256 fineAmount;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(string => address) public vehicleToUser;\r\n    mapping(address => Violation[]) userViolations;\r\n    mapping(address => uint256) public finesPaid;\r\n    mapping(string => uint256) public violationFines;\r\n\r\n    event UserCreated(address indexed userAddress, string name, string vehicleRegistrationNumber);\r\n    event ViolationReported(address indexed user, string violationType, address reportedBy, uint256 fineAmount);\r\n    event FinePaid(address indexed user, uint256 violationIndex, uint256 amount);\r\n\r\n    constructor() {\r\n        // Initialize some dummy fine amounts for violation types\r\n        violationFines[\"Speeding\"] = 100;\r\n        violationFines[\"Parking\"] = 50;\r\n        violationFines[\"Red Light\"] = 200;\r\n    }\r\n\r\n    // Create a new user\r\n    function createUser(string memory _name, string memory _vehicleRegistrationNumber) public {\r\n        require(users[msg.sender].walletAddress == address(0), \"User already exists\");\r\n        users[msg.sender] = User({\r\n            name: _name,\r\n            vehicleRegistrationNumber: _vehicleRegistrationNumber,\r\n            walletAddress: msg.sender,\r\n            pendingFines: 0\r\n        });\r\n        vehicleToUser[_vehicleRegistrationNumber] = msg.sender;\r\n        emit UserCreated(msg.sender, _name, _vehicleRegistrationNumber);\r\n    }\r\n\r\n    // Report a violation\r\n    function reportViolation(address _user, string memory _violationType) public {\r\n        require(users[_user].walletAddress != address(0), \"User does not exist\");\r\n        require(violationFines[_violationType] > 0, \"Invalid violation type\");\r\n\r\n        uint256 fineAmount = violationFines[_violationType];\r\n        userViolations[_user].push(Violation({\r\n            time: block.timestamp,\r\n            violationType: _violationType,\r\n            reportedBy: msg.sender,\r\n            isPaid: false,\r\n            fineAmount: fineAmount\r\n        }));\r\n        users[_user].pendingFines++;\r\n        emit ViolationReported(_user, _violationType, msg.sender, fineAmount);\r\n    }\r\n\r\n    // Fetch all violations of a user\r\n    function getUserViolations(address _user) public view returns (Violation[] memory) {\r\n        return userViolations[_user];\r\n    }\r\n\r\n    // Pay a fine\r\n    function payFine(address _user, uint256 _violationIndex) public payable {\r\n        require(users[_user].walletAddress != address(0), \"User does not exist\");\r\n        require(_violationIndex < userViolations[_user].length, \"Invalid violation index\");\r\n        require(!userViolations[_user][_violationIndex].isPaid, \"Fine already paid\");\r\n\r\n        Violation storage violation = userViolations[_user][_violationIndex];\r\n        require(msg.value == violation.fineAmount, \"Payment must be equal to the fine amount\");\r\n\r\n        violation.isPaid = true;\r\n        users[_user].pendingFines--;\r\n        finesPaid[_user] += msg.value;\r\n        emit FinePaid(_user, _violationIndex, msg.value);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}